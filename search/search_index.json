{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u5173\u4e8e\u6211","text":"<p>Hi~\uff0c\u6b22\u8fce\u6765\u5230\u6211\u7684\u5c0f\u7834\u7ad9\u3002\u53ef\u4ee5\u901a\u8fc7\u90ae\u7bb1\u8054\u7cfb\u5230\u6211\uff1azixianwei@foxmail.com\u3002</p>"},{"location":"basic-concepts-of-mysql/","title":"MySQL\u57fa\u7840\u77e5\u8bc6","text":"<p>\u672c\u7bc7\u5305\u542b\u4e86MySQL\u4e3b\u8981\u77e5\u8bc6\u70b9\u603b\u7ed3\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u6570\u636e\u5e93\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edfsql","title":"\u6570\u636e\u5e93\uff0c\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff0cSQL","text":"<p>\u8fd9\u4e09\u4e2a\u540d\u8bcd\u5728\u6570\u636e\u5e93\u76f8\u5173\u7684\u5185\u5bb9\u4e2d\u5341\u5206\u5e38\u89c1\uff0c\u4f46\u662f\u8868\u793a\u4e0d\u540c\u7684\u610f\u601d\u4e14\u5bb9\u6613\u6df7\u6dc6\u3002DB\uff0c\u6570\u636e\u5e93\uff1bDBMS\uff0c\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf(database management system)\uff1bSQL\uff0c\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00(structured query language)\uff0c\u4e00\u79cd\u9ad8\u7ea7\u8bed\u8a00\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u6570\u636e\u8868\u7684\u7ed3\u6784","title":"\u6570\u636e\u8868\u7684\u7ed3\u6784","text":"<p>\u6570\u636e\u8868\u662f\u6570\u636e\u5e93\u7684\u57fa\u672c\u7ec4\u6210\u5355\u5143\u3002\u6240\u6709\u7684\u6570\u636e\u5728\u6570\u636e\u5e93\u4e2d\u90fd\u4ee5\u8868\u683c\u7684\u5f62\u5f0f\u7ec4\u7ec7\uff0c\u76ee\u7684\u662f\u53ef\u8bfb\u6027\u5f3a\u3002 \u6570\u636e\u8868\u7684\u884c\uff0c\u6570\u636e\uff1b\u6570\u636e\u8868\u7684\u5217\uff0c\u5b57\u6bb5\u3002</p>"},{"location":"basic-concepts-of-mysql/#sql\u8bed\u53e5\u7684\u5206\u7c7b","title":"SQL\u8bed\u53e5\u7684\u5206\u7c7b","text":"<p>SQL\u8bed\u53e5\u5728\u5206\u7c7b\u4e0a\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e94\u4e2a\u7c7b\u522b\uff1a</p> <ul> <li>DQL\uff0c\u6570\u636e\u67e5\u8be2\u8bed\u8a00\uff1a<code>select</code></li> <li>DML\uff0c\u6570\u636e\u64cd\u4f5c\u8bed\u8a00\uff1a<code>insert</code>\uff0c<code>delete</code>\uff0c<code>update</code></li> <li>DDL\uff0c\u6570\u636e\u5b9a\u4e49\u8bed\u8a00\uff1a<code>create</code>\uff0c<code>drop</code>\uff0c<code>alter</code></li> <li>TCL\uff0c\u4e8b\u52a1\u63a7\u5236\u8bed\u8a00\uff1a<code>commit</code>\uff0c<code>rollback</code></li> <li>DCL\uff0c\u6570\u636e\u63a7\u5236\u8bed\u8a00\uff1a<code>grant</code>\uff0c<code>revoke</code></li> </ul>"},{"location":"basic-concepts-of-mysql/#mysql\u5bfc\u5165\u6570\u636e\u7684\u6b65\u9aa4","title":"MySQL\u5bfc\u5165\u6570\u636e\u7684\u6b65\u9aa4","text":"<ul> <li>\u767b\u5f55MySQL\u6570\u636e\u7ba1\u7406\u7cfb\u7edf\uff1a<code>mysql -uroot -p</code></li> <li>\u67e5\u770b\u6709\u54ea\u4e9b\u6570\u636e\u5e93\uff1a<code>show databases;</code>\uff0c(\u4e0d\u662fSQL\u8bed\u53e5\uff0c\u662fMySQL\u547d\u4ee4)</li> <li>\u521b\u5efa\u6570\u636e\u5e93\uff1a<code>create database &lt;dbname&gt;;</code>\uff0c(MySQL\u547d\u4ee4)</li> <li>\u4f7f\u7528<code>&lt;dbname&gt;</code>\u6570\u636e\u5e93\uff1a<code>use &lt;dbname&gt;;</code>\uff0c(MySQL\u547d\u4ee4)</li> <li>\u67e5\u770b\u5f53\u524d\u4f7f\u7528\u7684\u6570\u636e\u5e93\u4e2d\u6709\u54ea\u4e9b\u6570\u636e\u8868\uff1a<code>show tables;</code>\uff0c(MySQL\u547d\u4ee4)</li> <li>\u521d\u59cb\u5316\u6570\u636e\u8868\uff1a<code>source xxx.sql</code>\uff0c(MySQL\u547d\u4ee4)</li> </ul>"},{"location":"basic-concepts-of-mysql/#\u5176\u4ed6\u5e38\u7528\u7684\u547d\u4ee4","title":"\u5176\u4ed6\u5e38\u7528\u7684\u547d\u4ee4","text":"<ul> <li>\u67e5\u770b\u6570\u636e\u8868\u7684\u7ed3\u6784\uff1a<code>desc &lt;tablename&gt;;</code></li> <li>\u67e5\u770b\u5f53\u524d\u4f7f\u7528\u7684\u6570\u636e\u5e93\uff1a<code>select database();</code></li> <li>\u67e5\u770bMySQL\u7684\u7248\u672c\u4fe1\u606f\uff1a<code>select version();</code></li> <li>\u7ed3\u675f\u4e00\u6761\u8bed\u53e5\uff1a\u52a0\u4e0a<code>\\c</code></li> <li>\u67e5\u770b\u521b\u5efa\u6570\u636e\u8868\u7684\u8bed\u53e5\uff1a<code>show create table &lt;tablename&gt;;</code></li> </ul>"},{"location":"basic-concepts-of-mysql/#\u7b80\u5355\u7684\u67e5\u8be2\u8bed\u53e5dql","title":"\u7b80\u5355\u7684\u67e5\u8be2\u8bed\u53e5(DQL)","text":"<p>\u4e00\u822c\u7684\u683c\u5f0f\uff1a<code>select &lt;\u5b57\u6bb51&gt;,&lt;\u5b57\u6bb52&gt;,... from &lt;tablename&gt;;</code></p> <p>\u67e5\u8be2\u8bed\u53e5\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li>\u4efb\u4f55\u4e00\u6761SQL\u8bed\u53e5\u90fd\u5e94\u8be5\u4ee5<code>;</code>\u7ed3\u5c3e</li> <li>SQL\u8bed\u53e5\u4e0d\u533a\u5206\u5927\u5c0f\u5199</li> <li>\u5b57\u6bb5\u53ef\u4ee5\u53c2\u4e0e\u6570\u5b66\u8fd0\u7b97</li> <li>\u6807\u51c6\u7684SQL\u8bed\u53e5\u4e2d\u8981\u6c42\u5b57\u7b26\u4e32\u4f7f\u7528\u5355\u5f15\u53f7\u5305\u88f9</li> <li><code>as</code>\u5173\u952e\u5b57\u53ef\u4ee5\u88ab\u7701\u7565\uff1a<code>select ename, sal*12 year_sal from emp;</code></li> <li>\u8bed\u53e5<code>select * from &lt;tablename&gt;;</code>\u53ef\u4ee5\u67e5\u8be2\u6574\u4e2a\u8868\u4e2d\u7684\u6240\u6709\u5185\u5bb9\uff0c\u4f46\u662f\u6548\u7387\u6bd4\u8f83\u4f4e</li> </ul>"},{"location":"basic-concepts-of-mysql/#\u6761\u4ef6\u67e5\u8be2","title":"\u6761\u4ef6\u67e5\u8be2","text":""},{"location":"basic-concepts-of-mysql/#where\u8bed\u53e5","title":"<code>where</code>\u8bed\u53e5","text":"<p>\u8bed\u53e5\u683c\u5f0f\uff1a<code>select &lt;\u5b57\u6bb51&gt;,&lt;\u5b57\u6bb52&gt;,... from &lt;tablename&gt; where &lt;condition&gt;;</code></p> <p>\u6267\u884c\u987a\u5e8f\uff1a\u5148<code>from</code>\uff0c\u518d<code>where</code>\uff0c\u6700\u540e<code>select</code>\u3002</p>"},{"location":"basic-concepts-of-mysql/#between--and-\u8bed\u53e5","title":"<code>between ... and ...</code>\u8bed\u53e5","text":"<p><code>between ... and ...</code>\u8868\u793a\u95ed\u533a\u95f4\uff0c\u5e76\u4e14\u5de6\u5c0f\u53f3\u5927\uff1b\u8be5\u8bed\u53e5\u8fd8\u53ef\u4ee5\u7528\u5728\u5b57\u7b26\u4e32\u4e2d\uff0c\u4f46\u662f\u6b64\u65f6\u8868\u793a\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\u3002</p>"},{"location":"basic-concepts-of-mysql/#is-null\u8bed\u53e5","title":"<code>is null</code>\u8bed\u53e5","text":"<p>\u5728\u6570\u636e\u5e93\u4e2d\uff0c<code>null != 0</code>\uff0c<code>null</code>\u8868\u793a\u7684\u542b\u4e49\u662f\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u4e3a\u7a7a\uff0c\u800c<code>0</code>\u4e3a\u4e00\u4e2a\u5177\u4f53\u7684\u503c\u3002\u56e0\u6b64\uff0c\u4e0d\u80fd\u591f\u5c06<code>null</code>\u548c<code>0</code>\u4e4b\u95f4\u5212\u7b49\u53f7\u3002\u8868\u793a\u4e3a\u7a7a\u5e94\u4f7f\u7528<code>is null</code>\uff1b\u8868\u793a\u4e0d\u4e3a\u7a7a\u5e94\u4f7f\u7528<code>is not null</code>\u3002</p>"},{"location":"basic-concepts-of-mysql/#in\u548cor\u8bed\u53e5","title":"<code>in</code>\u548c<code>or</code>\u8bed\u53e5","text":"<p><code>in</code>\u548c<code>or</code>\u53ef\u4ee5\u89c6\u4e3a\u76f8\u540c\uff0c\u4f46\u662f\u4e8c\u8005\u540e\u9762\u7684\u53c2\u6570\u4e0d\u540c\u3002\u540c\u65f6\uff0c\u6ce8\u610f<code>in</code>\u540e\u9762\u7684\u53c2\u6570\u662f\u5177\u4f53\u7684\u503c\uff0c\u800c\u4e0d\u662f\u533a\u95f4\u3002<code>not in</code>\u662f<code>in</code>\u7684\u53cd\u4e49\u3002</p> <p><code>select ename,job from emp where job='SALESMAN' or job='MANAGER';</code></p> <p><code>select ename,job from emp where job in ('SALESMAN','MANAGER');</code></p>"},{"location":"basic-concepts-of-mysql/#\u6a21\u7cca\u67e5\u8be2","title":"\u6a21\u7cca\u67e5\u8be2","text":"<p>\u6a21\u7cca\u67e5\u8be2\u4f7f\u7528<code>like</code>\u5173\u952e\u5b57\u3002\u800c\u4f7f\u7528\u65f6\u9700\u8981\u4f7f\u7528<code>%</code>\u548c<code>_</code>\u4e24\u4e2a\u5b57\u7b26\u6765\u5339\u914d\u3002\u5176\u4e2d\uff0c<code>%</code>\u8868\u793a\u4efb\u610f\u591a\u4e2a\u5b57\u7b26\uff0c<code>_</code>\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u3002</p> <p><code>select ename from emp where ename like '%o%';</code></p> <p><code>select ename from emp where ename like '_a%';</code></p>"},{"location":"basic-concepts-of-mysql/#\u6392\u5e8f","title":"\u6392\u5e8f","text":"<p>\u8bed\u53e5\u683c\u5f0f\uff1a<code>select &lt;\u5b57\u6bb51&gt;,&lt;\u5b57\u6bb52&gt;,... from &lt;tablename&gt; where &lt;condition&gt; order by &lt;\u5b57\u6bb5i&gt; (asc/desc);</code></p> <p>\u6392\u5e8f\u6d89\u53ca\u7684\u5173\u952e\u5b57\u6709<code>asc</code>\u548c<code>desc</code>\u4e24\u4e2a\u3002\u5176\u4e2d\uff0c<code>asc</code>\u8868\u793a\u5347\u5e8f\uff0c<code>desc</code>\u8868\u793a\u964d\u5e8f\u3002\u8fde\u63a5\u8bed\u53e5\u65f6\uff0c\u4f7f\u7528<code>order by</code>\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a\u5347\u5e8f\u3002<code>order by</code>\u662f\u6700\u540e\u6267\u884c\u7684\uff0c\u4e14\u5b57\u6bb5\u53ef\u4ee5\u7528<code>select</code>\u540e\u7684\u5b57\u6bb5\u540d\u8868\u793a\uff0c\u56e0\u6b64\u4e0d\u5177\u5907\u5065\u58ee\u6027\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u5206\u7ec4\u51fd\u6570","title":"\u5206\u7ec4\u51fd\u6570","text":"<p>\u5206\u7ec4\u51fd\u6570\u662f\u6307\u5bf9\u4e00\u7ec4\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u7684\u51fd\u6570\u3002\u5206\u7ec4\u51fd\u6570\u5171\u67095\u4e2a\uff0c\u5206\u522b\u662f<code>count</code>\uff0c<code>sum</code>\uff0c<code>avg</code>\uff0c<code>max</code>\u548c<code>min</code>\u3002\u5206\u7ec4\u51fd\u6570\u8fd8\u6709\u53e6\u4e00\u4e2a\u540d\u5b57\uff1a\u591a\u884c\u5904\u7406\u51fd\u6570\u3002\u5206\u7ec4\u51fd\u6570\u7684\u7279\u70b9\uff1a\u8f93\u5165\u662f\u591a\u884c\uff0c\u4f46\u662f\u8f93\u51fa\u53ea\u6709\u4e00\u884c\u3002</p> <p>\u5206\u7ec4\u51fd\u6570\u5728\u9047\u5230<code>null</code>\u65f6\u60c5\u51b5\u8f83\u4e3a\u7279\u6b8a\u3002\u5206\u7ec4\u51fd\u6570\u4f1a\u81ea\u52a8\u5ffd\u7565<code>null</code>\uff0c\u53ea\u8981\u6709<code>null</code>\u53c2\u4e0e\u8fd0\u7b97\uff0c\u90a3\u4e48\u7ed3\u679c\u4e00\u5b9a\u662f<code>null</code>\u3002\u800c\u4e3a\u4e86\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\uff0c\u9700\u8981\u4f7f\u7528<code>ifnull(&lt;\u5b57\u6bb5&gt;, value)</code>\u6765\u5904\u7406\uff0c\u5373\uff0c\u5982\u679c\u67d0\u4e2a\u5b57\u6bb5\u88ab\u68c0\u7d22\u5230\u540e\u53d1\u73b0\u662f<code>null</code>\uff0c\u90a3\u5c31\u4f7f\u7528<code>value</code>\u6765\u4ee3\u66ff<code>null</code>\u8fdb\u884c\u540e\u7eed\u7684\u6570\u636e\u5904\u7406\u3002\u6ce8\u610f\uff0c<code>ifnull</code>\u662f\u4e00\u4e2a\u5355\u884c\u5904\u7406\u51fd\u6570\u3002</p> <p><code>select ename,(sal + ifnull(comm,0))*12 yealsal from emp;</code></p> <p>\u5206\u7ec4\u51fd\u6570\u4e0d\u53ef\u4ee5\u76f4\u63a5\u51fa\u73b0\u5728<code>where</code>\u8bed\u53e5\u4e2d\u3002\u7279\u6b8a\u7684\uff0c<code>count(*)</code>\u4e0d\u662f\u7edf\u8ba1\u67d0\u4e2a\u5b57\u6bb5\u4e2d\u6570\u636e\u7684\u4e2a\u6570\uff0c\u800c\u662f\u603b\u7684\u8bb0\u5f55\u6570\uff0c\u548c\u5b57\u6bb5\u65e0\u5173\uff1b<code>count(&lt;\u5b57\u6bb5&gt;)</code>\u7edf\u8ba1<code>&lt;\u5b57\u6bb5&gt;</code>\u4e2d\u4e0d\u4e3a<code>null</code>\u7684\u6570\u636e\u603b\u6570\u3002\u6700\u540e\uff0c\u5206\u7ec4\u51fd\u6570\u4e5f\u53ef\u7ec4\u5408\u8d77\u6765\u4f7f\u7528\u3002</p>"},{"location":"basic-concepts-of-mysql/#group-by\u4e0ehaving","title":"<code>group by</code>\u4e0e<code>having</code>","text":"<p><code>group by</code>\uff1a\u6309\u7167\u67d0\u4e2a\u5b57\u6bb5\u6216\u8005\u67d0\u4e9b\u5b57\u6bb5\u8fdb\u884c\u5206\u7ec4\uff1b<code>having</code>\uff1a\u5bf9\u5206\u7ec4\u4e4b\u540e\u7684\u6570\u636e\u8fdb\u884c\u518d\u6b21\u8fc7\u6ee4\u3002</p> <p>\u5206\u7ec4\u51fd\u6570\u4e00\u822c\u90fd\u4f1a\u548c<code>group by</code>\u8054\u5408\u4f7f\u7528\uff0c\u5e76\u4e14\u4efb\u4f55\u4e00\u4e2a\u5206\u7ec4\u51fd\u6570\u90fd\u662f\u5728<code>group by</code>\u8bed\u53e5\u6267\u884c\u5b8c\u6210\u4e4b\u540e\u624d\u4f1a\u6267\u884c\u3002\u5f53\u4e00\u6761SQL\u8bed\u53e5\u4e2d\u6ca1\u6709<code>group by</code>\u65f6\uff0c\u6574\u5f20\u8868\u7684\u6570\u636e\u4f1a\u81ea\u52a8\u88ab\u89c6\u4f5c\u4e00\u7ec4\uff1b\u5f53\u4e00\u6761SQL\u8bed\u53e5\u4e2d\u6709<code>group by</code>\uff0c<code>select</code>\u540e\u9762\u53ea\u80fd\u8ddf\u5206\u7ec4\u51fd\u6570\u548c\u53c2\u4e0e\u5206\u7ec4\u7684\u5b57\u6bb5\u3002</p> <p><code>select deptno,max(sal) from emp group by deptno having max(sal)&gt;2900;</code></p>"},{"location":"basic-concepts-of-mysql/#\u53bb\u91cd","title":"\u53bb\u91cd","text":"<p>\u53bb\u91cd\u4f7f\u7528\u7684\u5173\u952e\u5b57\u662f<code>distinct</code>\uff0c\u8be5\u5173\u952e\u5b57\u53ea\u80fd\u51fa\u73b0\u5728\u6240\u6709\u5b57\u6bb5\u7684\u6700\u524d\u9762\uff1b\u6240\u6709\u5b57\u6bb5\u8054\u5408\u53bb\u91cd\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u8fde\u63a5\u67e5\u8be2","title":"\u8fde\u63a5\u67e5\u8be2","text":"<p>\u5728\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u5927\u90e8\u5206\u7684\u60c5\u51b5\u4e0b\u90fd\u4e0d\u662f\u5728\u5355\u5f20\u8868\u4e2d\u8fdb\u884c\u6570\u636e\u67e5\u8be2\uff0c\u4e00\u822c\u90fd\u662f\u5728\u591a\u5f20\u8868\u4e2d\u8fdb\u884c\u674e\u8054\u5408\u67e5\u8be2\uff0c\u53d6\u51fa\u6700\u7ec8\u7ed3\u679c\u3002\u5728\u8868\u7684\u8fde\u63a5\u67e5\u8be2\u65b9\u9762\u6709\u4e00\u79cd\u73b0\u8c61\u88ab\u79f0\u4e3a\uff1a\u7b1b\u5361\u5c14\u79ef\u73b0\u8c61\uff0c\u5f53\u4e24\u5f20\u8868\u8fdb\u884c\u8fde\u63a5\u67e5\u8be2\u65f6\uff0c\u6ca1\u6709\u4efb\u4f55\u6761\u4ef6\u9650\u5236\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u67e5\u8be2\u7684\u7ed3\u679c\u6761\u6570\u662f\u4e24\u5f20\u8868\u8bb0\u5f55\u7684\u4e58\u79ef\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u5206\u7c7b","title":"\u5206\u7c7b","text":"<p>\u6839\u636e\u8bed\u6cd5\u51fa\u73b0\u7684\u5e74\u4ee3\uff1aSQL92\u548cSQL99</p> <p>\u6839\u636e\u8868\u7684\u8fde\u63a5\u65b9\u5f0f\uff1a\u5185\u8fde\u63a5(\u7b49\u503c\u8fde\u63a5\uff0c\u975e\u7b49\u503c\u8fde\u63a5\uff0c\u81ea\u8fde\u63a5)\uff1b\u5916\u8fde\u63a5(\u5de6\u8fde\u63a5\uff0c\u53f3\u8fde\u63a5)\uff1b\u5168\u8fde\u63a5\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u5185\u8fde\u63a5\u7b49\u503c\u8fde\u63a5","title":"\u5185\u8fde\u63a5(\u7b49\u503c\u8fde\u63a5)","text":"<p>\u6700\u5927\u7684\u7279\u70b9\uff1a\u8fdb\u884c\u8fde\u63a5\u7684\u6761\u4ef6\u662f\u7b49\u91cf\u5173\u7cfb\u3002\u8bed\u53e5\u683c\u5f0f\uff1a<code>... A join B &lt;condition&gt; where ...</code></p> <p>SQL92\uff1a<code>select e.ename,d.dname from emp e, dept d where e.deptno=d.deptno;</code></p> <p>SQL99\uff1a<code>select e.ename,d.dname from emp e (inner) join dept d on e.deptno=d.deptno;</code></p> <p>SQL99\u8bed\u6cd5\u7ed3\u6784\u66f4\u52a0\u6e05\u6670\uff0c\u8868\u7684\u8fde\u63a5\u6761\u4ef6\u548c\u540e\u6765\u7684where\u6761\u4ef6\u5206\u79bb\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u5185\u8fde\u63a5\u975e\u7b49\u503c\u8fde\u63a5","title":"\u5185\u8fde\u63a5(\u975e\u7b49\u503c\u8fde\u63a5)","text":"<p>\u6700\u5927\u7684\u7279\u70b9\uff1a\u8fde\u63a5\u4e2d\u7684\u5173\u7cfb\u662f\u975e\u7b49\u91cf\u5173\u7cfb\u3002</p> <p>\u627e\u51fa\u6bcf\u4e2a\u5458\u5de5\u7684\u5de5\u8d44\u7b49\u7ea7\uff0c\u8981\u6c42\u663e\u793a\u5458\u5de5\u540d\uff0c\u5de5\u8d44\uff0c\u548c\u5de5\u8d44\u7b49\u7ea7</p> <p><code>select e.ename,e.sal,s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal;</code></p>"},{"location":"basic-concepts-of-mysql/#\u5185\u8fde\u63a5\u81ea\u8fde\u63a5","title":"\u5185\u8fde\u63a5(\u81ea\u8fde\u63a5)","text":"<p>\u6700\u5927\u7684\u7279\u70b9\uff1a\u4e00\u5f20\u8868\u770b\u4f5c\u4e24\u5f20\u8868\uff0c\u81ea\u5df1\u8fde\u63a5\u81ea\u5df1\u3002</p> <p>\u627e\u51fa\u5458\u5de5\u7684\u4e0a\u7ea7\u9886\u5bfc\uff0c\u8981\u6c42\u663e\u793a\u5458\u5de5\u540d\u548c\u5bf9\u5e94\u7684\u9886\u5bfc\u540d</p> <p><code>select a.ename,b.ename from emp a join emp b on a.mgr=b.empno;</code></p>"},{"location":"basic-concepts-of-mysql/#\u5916\u8fde\u63a5","title":"\u5916\u8fde\u63a5","text":"<p>\u5185\u8fde\u63a5\uff1a\u5047\u8bbeA\u8868\u548cB\u8868\u8fdb\u884c\u8fde\u63a5\uff0c\u4f7f\u7528\u5185\u8fde\u63a5\u7684\u8bdd\uff0c\u51e1\u662fA\u8868\u548cB\u8868\u80fd\u591f\u5339\u914d\u4e0a\u7684\u8bb0\u5f55\u90fd\u67e5\u8be2\u51fa\u6765\u3002A\u8868\u548cB\u8868\u6ca1\u6709\u4e3b\u526f\u4e4b\u5206\uff0c\u662f\u5e73\u7b49\u7684\u5173\u7cfb\u3002</p> <p>\u5916\u8fde\u63a5\uff1a\u5047\u8bbeA\u8868\u548cB\u8868\u8fdb\u884c\u8fde\u63a5\uff0c\u4f7f\u7528\u5916\u8fde\u63a5\u7684\u8bdd\uff0cAB\u4e24\u5f20\u8868\u4e2d\u6709\u4e00\u5f20\u8868\u662f\u4e3b\u8868\uff0c\u53e6\u4e00\u4e2a\u662f\u526f\u8868\u3002\u4e3b\u8981\u67e5\u8be2\u4e3b\u8868\u4e2d\u7684\u6570\u636e\uff0c\u634e\u5e26\u67e5\u8be2\u526f\u8868\uff0c\u5f53\u526f\u8868\u4e2d\u7684\u6570\u636e\u6ca1\u6709\u4e0e\u4e3b\u8868\u4e2d\u7684\u6570\u636e\u5339\u914d\u4e0a\uff0c\u526f\u8868\u4f1a\u81ea\u52a8\u6a21\u62df\u51fa<code>null</code>\u4e0e\u4e4b\u5339\u914d\u3002</p> <p>\u5916\u8fde\u63a5\u6700\u91cd\u8981\u7684\u7279\u70b9\u662f\uff1a\u4e3b\u8868\u7684\u6570\u636e\u4f1a\u65e0\u6761\u4ef6\u7684\u5168\u90e8\u67e5\u8be2\u51fa\u6765\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u4e09\u5f20\u8868\u7684\u8fde\u63a5\u67e5\u8be2","title":"\u4e09\u5f20\u8868\u7684\u8fde\u63a5\u67e5\u8be2","text":"<p>\u627e\u51fa\u6bcf\u4e2a\u5458\u5de5\u7684\u90e8\u95e8\u540d\u79f0\u4ee5\u53ca\u5de5\u8d44\u7b49\u7ea7</p> <p><code>select e.ename,d.dname,s.grade from emp e join dept d on e.deptno = d.deptno join salgrade s on e.sal between s.losal and s.hisal;</code></p>"},{"location":"basic-concepts-of-mysql/#\u5b50\u67e5\u8be2","title":"\u5b50\u67e5\u8be2","text":"<p><code>select</code>\u8bed\u53e5\u4e2d\u5d4c\u5957<code>select</code>\u8bed\u53e5\uff0c\u88ab\u5d4c\u5957\u7684<code>select</code>\u8bed\u53e5\u662f\u5b50\u67e5\u8be2\u3002\u5b50\u67e5\u8be2\u7684\u4f4d\u7f6e\uff1a<code>select</code>\u540e\uff0c<code>from</code>\u540e\uff0c<code>where</code>\u540e\u3002</p>"},{"location":"basic-concepts-of-mysql/#union","title":"<code>union</code>","text":"<p>\u53ef\u4ee5\u5c06\u4e24\u6b21\u67e5\u8be2\u7684\u7ed3\u679c\u76f8\u53e0\u52a0\u3002</p>"},{"location":"basic-concepts-of-mysql/#limit","title":"<code>limit</code>","text":"<p>\u5206\u9875\u67e5\u8be2\uff0c<code>limit</code>\u662fMySQL\u4e2d\u7279\u6709\u7684\uff0c\u5176\u4ed6\u7684\u6570\u636e\u5e93\u4e2d\u6ca1\u6709\uff0c\u4e0d\u901a\u7528\u3002Oracle\u4e2d\u6709\u4e00\u4e2a\u76f8\u540c\u7684\u673a\u5236\uff0c\u53eb\u505a<code>rownum</code>\u3002<code>limit</code>\u7684\u4f5c\u7528\u662f\u53d6\u7ed3\u679c\u96c6\u4e2d\u7684\u90e8\u5206\u6570\u636e\u3002<code>limit</code>\u662fSQL\u8bed\u53e5\u4e2d\u6700\u540e\u6267\u884c\u7684\u73af\u8282\u3002</p> <p>\u8bed\u53e5\u683c\u5f0f\uff1a<code>... limit &lt;startindex&gt;,&lt;length&gt;</code>\uff0c\u5176\u4e2d\uff0c<code>&lt;startindex&gt;</code>\u8868\u793a\u8d77\u59cb\u4f4d\u7f6e\uff0c\u4ece0\u5f00\u59cb\uff1b<code>&lt;length&gt;</code>\u8868\u793a\u53d6\u51fa\u51e0\u4e2a\u6570\u636e\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u521b\u5efa\u8868","title":"\u521b\u5efa\u8868","text":"<p>\u8bed\u53e5\u683c\u5f0f\uff1a <pre><code>create table &lt;tablename&gt; (\n    &lt;\u5b57\u6bb5\u540d&gt;,&lt;\u6570\u636e\u7c7b\u578b&gt;,&lt;\u7ea6\u675f&gt;\n    ...\n);\n</code></pre></p> <p>\u5e38\u89c1\u7684\u6570\u636e\u7c7b\u578b\uff1a</p> <ul> <li><code>INT</code>\uff1a\u6574\u6570\u578b</li> <li><code>BIGINT</code>\uff1a\u957f\u6574\u578b</li> <li><code>FLOAT</code>\uff1a\u6d6e\u70b9\u578b</li> <li><code>CHAR</code>\uff1a\u5b9a\u957f\u5b57\u7b26\u578b</li> <li><code>VARCHAR</code>\uff1a\u53ef\u53d8\u957f\u5b57\u7b26\u578b</li> <li><code>DATE</code>\uff1a\u65e5\u671f\u7c7b\u578b</li> <li><code>BLOB</code>\uff1a\u4e8c\u8fdb\u5236\u5927\u5bf9\u8c61(\u5b58\u50a8\u56fe\u7247\uff0c\u89c6\u9891\u7b49\u6d41\u5a92\u4f53\u4fe1\u606f)</li> <li><code>CLOB</code>\uff1a\u5b57\u7b26\u5927\u5bf9\u8c61(\u5b58\u50a8\u8f83\u5927\u6587\u672c)</li> </ul>"},{"location":"basic-concepts-of-mysql/#char\u4e0evarchar","title":"<code>CHAR</code>\u4e0e<code>VARCHAR</code>","text":"<p>\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u5f53\u67d0\u4e2a\u5b57\u6bb5\u4e2d\u7684\u6570\u636e\u957f\u5ea6\u4e0d\u53d1\u751f\u6539\u53d8\u7684\u65f6\u5019\uff0c\u662f\u5b9a\u957f\u7684\uff0c\u91c7\u7528<code>CHAR</code>\uff1b\u5f53\u4e00\u4e2a\u5b57\u6bb5\u7684\u6570\u636e\u957f\u5ea6\u4e0d\u786e\u5b9a\uff0c\u91c7\u7528<code>VARCHAR</code>\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u63d2\u5165\u6570\u636e","title":"\u63d2\u5165\u6570\u636e","text":"<p>\u8bed\u53e5\u683c\u5f0f\uff1a <pre><code>insert into &lt;tablename&gt; (&lt;\u5b57\u6bb51&gt;,&lt;\u5b57\u6bb52&gt;,...) values (\n    &lt;value1&gt;,&lt;value2&gt;,...\n);\n</code></pre></p> <p>\u5b57\u6bb5\u7684\u6570\u91cf\u548c\u503c\u7684\u6570\u91cf\u5e94\u8be5\u76f8\u540c\uff0c\u5e76\u4e14\u6570\u636e\u7c7b\u578b\u8981\u5bf9\u5e94\u76f8\u540c\u3002\u5f53\u4e00\u6761<code>insert</code>\u8bed\u53e5\u6267\u884c\u6210\u529f\u540e\uff0c\u8868\u683c\u4e2d\u4f1a\u591a\u4e00\u6761\u8bb0\u5f55\uff0c\u5373\u4fbf\u591a\u7684\u8fd9\u884c\u8bb0\u5f55\u4e2d\u67d0\u4e9b\u5b57\u6bb5\u662f<code>null</code>\uff0c\u540e\u671f\u4e5f\u65e0\u6cd5\u518d\u6267\u884c<code>insert</code>\u8bed\u53e5\u8fdb\u884c\u6570\u636e\u63d2\u5165\u800c\u4fee\u6539\uff0c\u53ea\u80fd\u901a\u8fc7<code>update</code>\u8fdb\u884c\u66f4\u65b0\u3002<code>insert</code>\u53ef\u4ee5\u4e00\u6b21\u63d2\u5165\u591a\u6761\u8bb0\u5f55\uff0cvalues\u4f7f\u7528\"<code>,</code>\"\u9694\u5f00\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u8868\u7684\u590d\u5236","title":"\u8868\u7684\u590d\u5236","text":"<p>\u5c06\u67e5\u8be2\u7684\u7ed3\u679c\u5f53\u4f5c\u8868\u521b\u5efa\u51fa\u6765\uff1a<code>create table &lt;tablename&gt; as &lt;DQL\u8bed\u53e5&gt;;</code></p>"},{"location":"basic-concepts-of-mysql/#\u5c06\u67e5\u8be2\u7ed3\u679c\u63d2\u5165\u5230\u8868\u4e2d","title":"\u5c06\u67e5\u8be2\u7ed3\u679c\u63d2\u5165\u5230\u8868\u4e2d","text":"<p><code>insert into &lt;tablename&gt; &lt;DQL\u8bed\u53e5&gt;</code></p>"},{"location":"basic-concepts-of-mysql/#\u4fee\u6539\u6570\u636e","title":"\u4fee\u6539\u6570\u636e","text":"<p><code>update &lt;tablename&gt; set &lt;\u5b57\u6bb51&gt;=&lt;value1&gt;,&lt;\u5b57\u6bb52&gt;=&lt;value2&gt;,... where &lt;condition&gt;;</code></p> <p>\u6ca1\u6709\u6761\u4ef6\u65f6\u8868\u793a\u6574\u5f20\u8868\u7684\u6570\u636e\u90fd\u8fdb\u884c\u66f4\u65b0\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u5220\u9664\u6570\u636e","title":"\u5220\u9664\u6570\u636e","text":"<p><code>delete from &lt;tablename&gt; where &lt;condition&gt;;</code></p> <p>\u6ca1\u6709\u6761\u4ef6\u65f6\u8868\u793a\u6574\u5f20\u8868\u7684\u6570\u636e\u5168\u90e8\u5220\u9664\u3002</p> <p>\u5927\u8868\u5220\u9664\uff1a<code>truncate table &lt;tablename&gt;;</code>\uff0c\u8868\u4f1a\u88ab\u622a\u65ad\u5e76\u4e14\u4e0d\u53ef\u56de\u6eda\uff0c\u6c38\u4e45\u4e22\u5931\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u7ea6\u675f","title":"\u7ea6\u675f","text":"<p>\u5728\u521b\u5efa\u8868\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7ed9\u8868\u7684\u5b57\u6bb5\u6dfb\u52a0\u76f8\u5e94\u7684\u7ea6\u675f\u3002\u6dfb\u52a0\u7ea6\u675f\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u8868\u4e2d\u6570\u636e\u7684\u5408\u6cd5\u6027\uff0c\u6709\u6548\u6027\uff0c\u548c\u5b8c\u6574\u6027\u3002</p> <p>\u5e38\u89c1\u7684\u7ea6\u675f\uff1a</p> \u540d\u79f0 \u5173\u952e\u5b57 \u4f5c\u7528 \u975e\u7a7a\u7ea6\u675f <code>not null</code> \u7ea6\u675f\u7684\u5b57\u6bb5\u4e0d\u53ef\u4e3a<code>null</code> \u552f\u4e00\u7ea6\u675f <code>unique</code> \u7ea6\u675f\u7684\u5b57\u6bb5\u4e0d\u80fd\u91cd\u590d \u4e3b\u952e\u7ea6\u675f <code>primary key</code> \u7ea6\u675f\u7684\u5b57\u6bb5\u5373\u4e0d\u80fd\u4e3a<code>null</code>\u4e5f\u4e0d\u80fd\u91cd\u590d \u5916\u952e\u7ea6\u675f <code>foreign key</code> *\u68c0\u67e5\u7ea6\u675f <code>check</code> Oracle\u6570\u636e\u5e93\u4e2d\u6709check\u7ea6\u675f\uff0cMySQL\u4e2d\u6ca1\u6709"},{"location":"basic-concepts-of-mysql/#\u975e\u7a7a\u7ea6\u675f","title":"\u975e\u7a7a\u7ea6\u675f","text":"<p>\u6ca1\u6709\u5217\u7ea7\u7ea6\u675f\u548c\u8868\u7ea7\u7ea6\u675f\u4e4b\u5206\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u552f\u4e00\u7ea6\u675f","title":"\u552f\u4e00\u7ea6\u675f","text":"<p>\u552f\u4e00\u7ea6\u675f\u4fee\u9970\u7684\u5b57\u6bb5\u5177\u6709\u552f\u4e00\u6027\uff0c\u4e0d\u53ef\u91cd\u590d\uff0c\u4f46\u662f\u53ef\u4ee5\u4e3a<code>null</code>\uff0c\u5177\u6709\u5217\u7ea7\u7ea6\u675f\u548c\u8868\u7ea7\u7ea6\u675f\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u4e3b\u952e\u7ea6\u675f","title":"\u4e3b\u952e\u7ea6\u675f","text":"<p>\u6dfb\u52a0\u4e86\u4e3b\u952e\u7ea6\u675f\u7684\u5b57\u6bb5\uff0c\u6570\u636e\u4e0d\u80fd\u4e3a<code>null</code>\uff0c\u4e5f\u4e0d\u80fd\u91cd\u590d\u3002\u4e3b\u952e\u7ea6\u675f\uff0c\u4e3b\u952e\u5b57\u6bb5\uff0c\u4e3b\u952e\u503c\u3002</p> <p>\u4f5c\u7528\uff1a\u8868\u7684\u8bbe\u8ba1\u4e09\u8303\u5f0f\u4e2d\u6709\u8981\u6c42\uff0c\u7b2c\u4e00\u8303\u5f0f\u5c31\u8981\u6c42\u4efb\u4f55\u4e00\u5f20\u8868\u90fd\u5e94\u8be5\u6709\u4e3b\u952e\uff0c\u4e3b\u952e\u503c\u662f\u8fd9\u884c\u8bb0\u5f55\u5728\u8fd9\u5f20\u8868\u4e2d\u7684\u552f\u4e00\u6807\u8bc6\u3002</p> <p>\u5206\u7c7b\uff1a\u6839\u636e\u4e3b\u952e\u5b57\u6bb5\u7684\u6570\u91cf\u6765\u5212\u5206\uff1a\u5355\u4e00\u4e3b\u952e\uff0c\u590d\u5408\u4e3b\u952e(\u8fdd\u53cd\u4e09\u8303\u5f0f)\uff1b\u6839\u636e\u4e3b\u952e\u7684\u6027\u8d28\u5212\u5206\uff1a\u81ea\u7136\u4e3b\u952e(\u4e3b\u952e\u503c\u6700\u597d\u5c31\u662f\u4e00\u4e2a\u548c\u4e1a\u52a1\u65e0\u5173\u7684\u81ea\u7136\u6570)\uff0c\u4e1a\u52a1\u4e3b\u952e(\u4e3b\u952e\u503c\u548c\u4e1a\u52a1\u6302\u94a9)\u3002</p> <p>\u6700\u597d\u4e0d\u8981\u62ff\u7740\u548c\u4e1a\u52a1\u6302\u94a9\u7684\u5b57\u6bb5\u4f5c\u4e3a\u4e3b\u952e\u503c\u3002\u56e0\u6b64\u4ee5\u540e\u7684\u4e1a\u52a1\u4e00\u65e6\u53d1\u751f\u6539\u53d8\u7684\u65f6\u5019\uff0c\u4e3b\u952e\u503c\u53ef\u4ee5\u9700\u8981\u968f\u4e4b\u53d1\u751f\u53d8\u5316\uff0c\u4f46\u662f\u6709\u7684\u65f6\u5019\u6ca1\u6709\u529e\u6cd5\u6539\u53d8\uff0c\u56e0\u6b64\u53d8\u5316\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e3b\u952e\u91cd\u590d\u3002</p> <p>\u4e00\u5f20\u8868\u7684\u4e3b\u952e\u7ea6\u675f\u53ea\u80fd\u6709\u4e00\u4e2a\uff0c\u5305\u542b\u5217\u7ea7\u7ea6\u675f\u548c\u8868\u7ea7\u7ea6\u675f\u3002MySQL\u63d0\u4f9b\u4e3b\u952e\u503c\u81ea\u589e\u7684\u529f\u80fd\u3002 <code>... id,INT,primary key, auto_increment ...</code></p>"},{"location":"basic-concepts-of-mysql/#\u5916\u952e\u7ea6\u675f","title":"\u5916\u952e\u7ea6\u675f","text":"<p>\u5916\u952e\u7ea6\u675f\uff0c\u5916\u952e\u5b57\u6bb5\uff0c\u5916\u952e\u503c\u3002</p> <p>\u5220\u9664\u6570\u636e\u7684\u65f6\u5019\uff0c\u5148\u5220\u9664\u5b50\u8868\uff0c\u518d\u5220\u9664\u7236\u8868\uff1b\u6dfb\u52a0\u6570\u636e\u7684\u65f6\u5019\uff0c\u5148\u6dfb\u52a0\u7236\u8868\uff0c\u518d\u6dfb\u52a0\u5b50\u8868\uff1b\u521b\u5efa\u8868\u7684\u65f6\u5019\uff0c\u5148\u521b\u5efa\u7236\u8868\uff0c\u518d\u521b\u5efa\u5b50\u8868\uff1b\u5220\u9664\u8868\u7684\u65f6\u5019\uff0c\u5148\u5220\u9664\u5b50\u8868\uff0c\u518d\u5220\u9664\u7236\u8868\u3002</p> <p>\u5916\u952e\u503c\u53ef\u4ee5\u4e3a<code>null</code>\uff0c\u5916\u952e\u5b57\u6bb5\u5f15\u7528\u7684\u5b57\u6bb5\u4e0d\u4e00\u5b9a\u662f\u4e3b\u952e\uff0c\u4f46\u5fc5\u987b\u6709\u552f\u4e00\u6027(\u6709unique\u7ea6\u675f)\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u5b58\u50a8\u5f15\u64ce","title":"\u5b58\u50a8\u5f15\u64ce","text":"<p>\u5b58\u50a8\u5f15\u64ce\u63cf\u8ff0\u7684\u662f\u8868\u7684\u5b58\u50a8\u65b9\u5f0f\u3002\u4e00\u4e2a\u5b8c\u6574\u7684\u5efa\u8868\u8bed\u53e5\u5e94\u8be5\u662f\uff1a</p> <pre><code>create table &lt;tablename&gt; (\n    &lt;\u5b57\u6bb5&gt;,&lt;type&gt;,&lt;constraint&gt;\n    ...\n) ENGINE=InnoDB DEFAULT CHARSET=uft8;\n</code></pre> <p>\u5efa\u8868\u7684\u65f6\u5019\u53ef\u4ee5\u6307\u5b9a\u5b58\u50a8\u5f15\u64ce\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u5b57\u7b26\u96c6\u3002MySQL\u9ed8\u8ba4\u4f7f\u7528\u7684\u5b58\u50a8\u5f15\u64ce\u662fInnoDB\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7684\u5b57\u7b26\u96c6\u662fUTF8\u3002\u201c\u5b58\u50a8\u5f15\u64ce\u201d\u8fd9\u4e2a\u540d\u8bcd\u53ea\u5728MySQL\u4e2d\u4f7f\u7528\uff0cOracle\u4e2d\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u673a\u5236\u53eb\u505a\u201c\u8868\u7684\u5b58\u50a8\u65b9\u5f0f\u201d\u3002MySQL\u652f\u6301\u5f88\u591a\u7684\u5b58\u50a8\u5f15\u64ce\uff0c\u6bcf\u4e00\u79cd\u5b58\u50a8\u5f15\u64ce\u90fd\u5bf9\u5e94\u4e86\u4e00\u79cd\u4e0d\u540c\u7684\u5b58\u50a8\u65b9\u5f0f\u3002</p> <p>\u67e5\u770bMySQL\u652f\u6301\u7684\u5f15\u64ce\uff1a<code>show engines \\G;</code></p>"},{"location":"basic-concepts-of-mysql/#\u5e38\u89c1\u7684\u5b58\u50a8\u5f15\u64cemyisam","title":"\u5e38\u89c1\u7684\u5b58\u50a8\u5f15\u64ce(MyISAM)","text":"<p>MyISAM\u4e0d\u652f\u6301\u4e8b\u52a1\uff0c\u662fMySQL\u4e2d\u6700\u5e38\u7528\u7684\u5b58\u50a8\u5f15\u64ce\uff0c\u4f46\u662f\u4e0d\u662f\u9ed8\u8ba4\u7684\u3002MyISAM\u4f7f\u7528\u4e09\u4e2a\u6587\u4ef6\u8868\u793a\u6bcf\u5f20\u6570\u636e\u8868\uff1a</p> <ul> <li>\u683c\u5f0f\u6587\u4ef6\uff1a\u5b58\u50a8\u8868\u7ed3\u6784\u7684\u5b9a\u4e49\uff0c<code>.frm</code>\uff0c<code>format</code></li> <li>\u6570\u636e\u6587\u4ef6\uff1a\u5b58\u50a8\u8868\u884c\u7684\u5185\u5bb9\uff0c<code>.MYD</code>\uff0c<code>data</code></li> <li>\u7d22\u5f15\u6587\u4ef6\uff1a\u5b58\u50a8\u8868\u4e2d\u7684\u7d22\u5f15\uff0c<code>.MYI</code>\uff0c<code>index</code></li> </ul> <p>MyISAM\u53ef\u4ee5\u88ab\u8f6c\u6362\u4e3a\u538b\u7f29\u7684\uff0c\u53ea\u8bfb\u7684\u6587\u4ef6\uff0c\u6765\u8282\u7701\u7a7a\u95f4\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u5e38\u89c1\u7684\u5b58\u50a8\u5f15\u64ceinnodb","title":"\u5e38\u89c1\u7684\u5b58\u50a8\u5f15\u64ce(InnoDB)","text":"<p>InnoDB\u652f\u6301\u4e8b\u52a1\uff0c\u652f\u6301\u884c\u7ea7\u9501\uff0c\u548c\u5916\u952e\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u5b58\u50a8\u5f15\u64ce\u7684\u6570\u636e\u5b89\u5168\u80fd\u591f\u5f97\u5230\u4fdd\u969c\u3002\u8be5\u5f15\u64ce\u4e2d\uff0c\u8868\u7684\u7ed3\u6784\u5b58\u50a8\u5728<code>.frm</code>\u6587\u4ef6\u4e2d\uff0c\u6570\u636e\u5b58\u50a8\u5728<code>tablespace</code>\u7684\u8868\u7a7a\u95f4\u4e2d\uff0c\u65e0\u6cd5\u88ab\u538b\u7f29\uff0c\u65e0\u6cd5\u88ab\u8f6c\u6362\u4e3a\u53ea\u8bfb\u3002<code>tablespace</code>\u662f\u4e00\u4e2a\u903b\u8f91\u6982\u5ff5\uff0c\u4e0d\u5bf9\u5e94\u5b9e\u9645\u6587\u4ef6\u3002</p> <p>InnoDB\u5f15\u64ce\u5728MySQL\u670d\u52a1\u5668\u5d29\u6e83\u540e\u63d0\u4f9b\u81ea\u52a8\u6062\u590d\u529f\u80fd\uff0c\u5e76\u4e14\u652f\u6301\u7ea7\u8054\u5220\u9664\u548c\u7ea7\u8054\u66f4\u65b0(\u5916\u952e)\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u5e38\u89c1\u7684\u5b58\u50a8\u5f15\u64cememoryheap","title":"\u5e38\u89c1\u7684\u5b58\u50a8\u5f15\u64ce(MEMORY/HEAP)","text":"<p>MEMOEY\u5b58\u50a8\u5f15\u64ce\u4e0d\u652f\u6301\u4e8b\u52a1\uff0c\u6570\u636e\u5bb9\u6613\u4e22\u5931\u3002\u56e0\u6b64\u6240\u6709\u7684\u6570\u636e\u548c\u7d22\u5f15\u4fe1\u606f\u90fd\u662f\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u7684\u3002\u4f46\u662f\u8be5\u5b58\u50a8\u5f15\u64ce\u7684\u67e5\u8be2\u901f\u5ea6\u6700\u5feb\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u4e8b\u52a1transaction","title":"\u4e8b\u52a1(transaction)","text":"<p>\u4e00\u4e2a\u4e8b\u52a1\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u4e1a\u52a1\u903b\u8f91\u5355\u5143\uff0c\u4e0d\u53ef\u518d\u5206\u3002\u8981\u60f3\u4fdd\u8bc1\u4e24\u6761\u4ee5\u4e0a\u7684DML\u8bed\u53e5\u540c\u65f6\u6210\u529f\u6216\u540c\u65f6\u5931\u8d25\uff0c\u5c31\u9700\u8981\u501f\u52a9\u6570\u636e\u5e93\u4e2d\u7684\u201c\u4e8b\u52a1\u673a\u5236\u201d\u3002\u548c\u4e8b\u52a1\u76f8\u540c\u7684\u8bed\u53e5\u53ea\u6709DML\u8bed\u53e5(<code>insert</code>\uff0c<code>delete</code>\uff0c<code>update</code>)\u3002\u56e0\u4e3a\u8fd9\u4e09\u4e2a\u8bed\u53e5\u90fd\u662f\u548c\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6570\u636e\u76f8\u5173\u7684\u3002\u4e8b\u52a1\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u4fdd\u969c\u6570\u636e\u7684\u5b8c\u6574\u6027\u548c\u5b89\u5168\u6027\u3002\u5047\u8bbe\u6240\u6709\u7684\u4e1a\u52a1\u90fd\u80fd\u4f7f\u7528\u4e00\u6761DML\u8bed\u53e5\u5b8c\u6210\uff0c\u5219\u4e0d\u9700\u8981\u4e8b\u52a1\uff1b\u4f46\u662f\u5728\u5b9e\u9645\u4e1a\u52a1\u4e2d\uff0c\u901a\u5e38\u4e00\u9879\u4efb\u52a1\u5c31\u9700\u8981\u591a\u6761DML\u8bed\u53e5\u914d\u5408\u5b8c\u6210\uff0c\u56e0\u6b64\u9700\u8981\u4e8b\u52a1\u5b58\u5728\u3002</p> <p>\u4e8b\u52a1\u7684\u4f7f\u7528\u8bed\u53e5\uff1a<code>commit</code>\uff0c<code>rollback</code>\uff0c<code>savepoint</code>(TCL\u8bed\u53e5)</p>"},{"location":"basic-concepts-of-mysql/#\u4e8b\u52a1\u7684\u7279\u6027","title":"\u4e8b\u52a1\u7684\u7279\u6027","text":"<p>ACID\uff1aA\uff0c\u539f\u5b50\u6027\uff0c\u4e8b\u52a1\u662f\u6700\u5c0f\u7684\u5de5\u4f5c\u5355\u5143\uff0c\u4e0d\u53ef\u518d\u5206\uff1bC\uff0c\u4e00\u81f4\u6027\uff0c\u4e8b\u52a1\u5fc5\u987b\u4fdd\u8bc1\u591a\u6761DML\u8bed\u53e5\u540c\u65f6\u5b8c\u6210\u6216\u540c\u65f6\u5931\u8d25\uff1bI\uff0c\u9694\u79bb\u6027\uff0c\u4e8b\u52a1A\u4e0e\u4e8b\u52a1B\u4e4b\u95f4\u76f8\u4e92\u9694\u79bb\uff1bD\uff0c\u6301\u4e45\u6027\uff0c\u6700\u7ec8\u6570\u636e\u5fc5\u987b\u6301\u4e45\u5316\u5230\u786c\u76d8\u6587\u4ef6\u4e2d\uff0c\u4e8b\u52a1\u624d\u7b97\u6210\u529f\u7684\u7ed3\u675f\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u4e8b\u52a1\u4e4b\u95f4\u7684\u9694\u79bb\u6027","title":"\u4e8b\u52a1\u4e4b\u95f4\u7684\u9694\u79bb\u6027","text":"<p>\u4e8b\u52a1\u7684\u9694\u79bb\u6027\u5b58\u5728\u9694\u79bb\u7ea7\u522b\uff0c\u7406\u8bba\u4e0a\u9694\u79bb\u7ea7\u522b\u5305\u62ec4\u4e2a\u3002</p> <ul> <li>\u7b2c\u4e00\u7ea7\u522b\uff1a\u8bfb\u672a\u63d0\u4ea4(read uncommited)\uff0c\u5bf9\u65b9\u4e8b\u52a1\u8fd8\u6ca1\u6709\u63d0\u4ea4\uff0c\u5f53\u524d\u4e8b\u52a1\u53ef\u4ee5\u8bfb\u53d6\u5230\u5bf9\u65b9\u672a\u63d0\u4ea4\u7684\u6570\u636e\uff1b\u8bfb\u672a\u63d0\u4ea4\u5b58\u5728\u810f\u8bfb\u73b0\u8c61(dirty read)\uff0c\u8868\u793a\u8bfb\u5230\u4e86\u810f\u7684\u6570\u636e\u3002</li> <li>\u7b2c\u4e8c\u7ea7\u522b\uff1a\u8bfb\u5df2\u63d0\u4ea4(read commited)\uff0c\u5bf9\u65b9\u4e8b\u52a1\u63d0\u4ea4\u4e4b\u540e\u7684\u6570\u636e\u88ab\u8bfb\u53d6\u5230\uff1b\u8bfb\u5df2\u63d0\u4ea4\u5b58\u5728\u4e0d\u53ef\u91cd\u590d\u8bfb\u7684\u95ee\u9898\uff0c\u4f46\u662f\u89e3\u51b3\u4e86\u810f\u8bfb\u73b0\u8c61\u3002</li> <li>\u7b2c\u4e09\u7ea7\u522b\uff1a\u53ef\u91cd\u590d\u8bfb(repeatable read)\uff0c\u89e3\u51b3\u4e86\u4e0d\u53ef\u91cd\u590d\u8bfb\u7684\u95ee\u9898\uff0c\u4f46\u662f\u5b58\u5728\u8bfb\u53d6\u7684\u6570\u636e\u662f\u5e7b\u8c61\u7684\u95ee\u9898\u3002</li> <li>\u7b2c\u56db\u7ea7\u522b\uff1a\u5e8f\u5217\u5316\u8bfb(serializable)\uff0c\u89e3\u51b3\u4e86\u6240\u6709\u95ee\u9898\uff0c\u4f46\u662f\u6548\u7387\u4f4e\uff0c\u5404\u4e2a\u4e8b\u52a1\u9700\u8981\u6392\u961f\u5904\u7406\u3002</li> </ul> <p>Oracle\u6570\u636e\u5e93\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u662f\uff1a\u8bfb\u5df2\u63d0\u4ea4\uff1bMySQL\u6570\u636e\u5e93\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u662f\uff1a\u53ef\u91cd\u590d\u8bfb\u3002MySQL\u6570\u636e\u5e93\u4e2d\uff0c\u4e8b\u52a1\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u81ea\u52a8\u63d0\u4ea4\u7684\uff0c\u5373\uff0c\u53ea\u8981\u6267\u884c\u4e86\u4efb\u610f\u4e00\u6761DML\u8bed\u53e5\uff0c\u5219\u8fdb\u884c\u4e00\u6b21\u63d0\u4ea4\u3002</p> <p>\u5173\u95ed\u81ea\u52a8\u63d0\u4ea4\uff1a<code>start transaction;</code>\uff0c\u8bbe\u7f6e\u5168\u5c40\u4e8b\u52a1\u7684\u9694\u79bb\u7ea7\u522b\uff1a<code>set global transaction ioslation level read uncommited</code>\uff0c\u67e5\u770b\u4e8b\u52a1\u7684\u5168\u5c40\u9694\u79bb\u7ea7\u522b\uff1a<code>select @@global.tx_isolation;</code></p>"},{"location":"basic-concepts-of-mysql/#\u7d22\u5f15","title":"\u7d22\u5f15","text":"<p>\u7d22\u5f15\u5c31\u76f8\u5f53\u4e8e\u4e00\u672c\u4e66\u7684\u76ee\u5f55\uff0c\u901a\u8fc7\u76ee\u5f55\u53ef\u4ee5\u5feb\u901f\u7684\u67e5\u627e\u5230\u5bf9\u5e94\u7684\u8d44\u6e90\u3002\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u67e5\u8be2\u4e00\u5f20\u8868\u7684\u65f6\u5019\u6709\u4e24\u79cd\u68c0\u7d22\u65b9\u5f0f\uff1a\u5168\u8868\u626b\u63cf\u548c\u6839\u636e\u7d22\u5f15\u626b\u63cf\uff0c\u663e\u7136\uff0c\u540e\u8005\u6548\u7387\u9ad8\u3002</p> <p>\u7d22\u5f15\u7f29\u5c0f\u4e86\u626b\u63cf\u7684\u8303\u56f4\uff0c\u4f46\u662f\u7d22\u5f15\u867d\u7136\u53ef\u4ee5\u63d0\u9ad8\u68c0\u7d22\u7684\u6548\u7387\uff0c\u4f46\u662f\u4e0d\u80fd\u968f\u610f\u7684\u6dfb\u52a0\u3002\u56e0\u4e3a\uff0c\u7d22\u5f15\u4e5f\u662f\u6570\u636e\u5e93\u4e2d\u7684\u5bf9\u8c61\uff0c\u4e5f\u9700\u8981\u6570\u636e\u5e93\u4e0d\u65ad\u7684\u7ef4\u62a4\uff0c\u662f\u6709\u7ef4\u62a4\u6210\u672c\u7684\u3002\u8868\u4e2d\u7ecf\u5e38\u88ab\u4fee\u6539\u7684\u90e8\u5206\u5c31\u4e0d\u9002\u5408\u6dfb\u52a0\u7d22\u5f15\uff0c\u56e0\u4e3a\u6570\u636e\u4e00\u65e6\u4fee\u6539\uff0c\u7d22\u5f15\u5c31\u9700\u8981\u91cd\u65b0\u6392\u5217\uff0c\u8fdb\u884c\u7ef4\u62a4\u3002\u6dfb\u52a0\u7d22\u5f15\u662f\u4e3a\u67d0\u4e00\u4e2a\u6216\u8005\u67d0\u4e00\u4e9b\u5b57\u6bb5\u6dfb\u52a0\u3002</p> <p>\u4f55\u65f6\u8003\u8651\u6dfb\u52a0\u7d22\u5f15\uff1f1.\u6570\u636e\u91cf\u5e9e\u5927\uff1b2.\u8be5\u5b57\u6bb5\u5f88\u5c11\u8fdb\u884cDML\u64cd\u4f5c\uff1b3.\u8be5\u5b57\u6bb5\u7ecf\u5e38\u51fa\u73b0\u5728<code>where</code>\u5b50\u53e5\u4e2d\u3002\u4e3b\u952e\u548c\u5177\u6709\u552f\u4e00\u7ea6\u675f\u7684\u5b57\u6bb5\u4f1a\u81ea\u52a8\u6dfb\u52a0\u7d22\u5f15\uff0c\u56e0\u6b64\u6839\u636e\u4e3b\u952e\u67e5\u8be2\u7684\u6548\u7387\u8f83\u9ad8\uff0c\u5e94\u5c3d\u91cf\u6839\u636e\u4e3b\u952e\u8fdb\u884c\u68c0\u7d22\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u6dfb\u52a0\u7d22\u5f15","title":"\u6dfb\u52a0\u7d22\u5f15","text":"<p>\u8bed\u53e5\u683c\u5f0f\uff1a<code>create index &lt;indexname&gt; on &lt;tablename&gt;(&lt;\u5b57\u6bb5&gt;);</code>\u3002</p> <p>\u67e5\u770bSQL\u8bed\u53e5\u7684\u6267\u884c\u65b9\u5f0f\uff1a<code>explain &lt;SQL\u8bed\u53e5&gt;;</code></p>"},{"location":"basic-concepts-of-mysql/#\u5220\u9664\u7d22\u5f15","title":"\u5220\u9664\u7d22\u5f15","text":"<p>\u8bed\u53e5\u683c\u5f0f\uff1a<code>drop index &lt;indexname&gt; on &lt;tablename&gt;;</code></p>"},{"location":"basic-concepts-of-mysql/#\u7d22\u5f15\u7684\u5e95\u5c42\u7ed3\u6784\u4e0e\u5b9e\u73b0\u539f\u7406","title":"\u7d22\u5f15\u7684\u5e95\u5c42\u7ed3\u6784\u4e0e\u5b9e\u73b0\u539f\u7406","text":"<p>B+\u6811\u3002\u901a\u8fc7B+\u6811\u7f29\u5c0f\u626b\u63cf\u8303\u56f4\uff0c\u5e95\u5c42\u7d22\u5f15\u8fdb\u884c\u4e86\u6392\u5e8f\uff0c\u5206\u533a\u3002\u7d22\u5f15\u4f1a\u643a\u5e26\u6570\u636e\u5728\u8868\u4e2d\u7684\u201c\u7269\u7406\u5730\u5740\u201d\uff0c\u6700\u7ec8\u901a\u8fc7\u7d22\u5f15\u68c0\u7d22\u6570\u636e\u7684\u65f6\u5019\uff0c\u4f1a\u83b7\u53d6\u5230\u5173\u8054\u7684\u7269\u7406\u5730\u5740\uff0c\u901a\u8fc7\u7269\u7406\u5730\u5740\u5b9a\u4f4d\u8868\u4e2d\u7684\u6570\u636e\uff0c\u6548\u7387\u662f\u6700\u9ad8\u7684\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u7d22\u5f15\u7684\u5206\u7c7b","title":"\u7d22\u5f15\u7684\u5206\u7c7b","text":"<ul> <li>\u5355\u4e00\u7d22\u5f15\uff1a\u7ed9\u5355\u4e2a\u5b57\u6bb5\u6dfb\u52a0\u7d22\u5f15</li> <li>\u590d\u5408\u7d22\u5f15\uff1a\u591a\u4e2a\u5b57\u6bb5\u8054\u5408\u8d77\u6765\uff0c\u6dfb\u52a0\u4e00\u4e2a\u7d22\u5f15</li> <li>\u4e3b\u952e\u7d22\u5f15\uff1a\u4e3b\u952e\u4e0a\u4f1a\u81ea\u52a8\u6dfb\u52a0\u7d22\u5f15</li> <li>\u552f\u4e00\u7d22\u5f15\uff1a\u6709\u552f\u4e00\u7ea6\u675f\u7684\u5b57\u6bb5\u4f1a\u81ea\u52a8\u6dfb\u52a0\u7d22\u5f15</li> </ul>"},{"location":"basic-concepts-of-mysql/#\u7d22\u5f15\u5931\u8d25","title":"\u7d22\u5f15\u5931\u8d25","text":"<p>\u7d22\u5f15\u5931\u8d25\u7684\u60c5\u51b5\uff1a\u8fdb\u884c\u6a21\u7cca\u67e5\u8be2\u65f6\uff0c\u67e5\u8be2\u7684\u540d\u79f0\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u901a\u914d\u7b26<code>%</code>\u3002</p>"},{"location":"basic-concepts-of-mysql/#\u89c6\u56fe","title":"\u89c6\u56fe","text":"<p>\u7ad9\u5728\u4e0d\u540c\u7684\u89d2\u5ea6\u53bb\u770b\u5f85\u6570\u636e\u3002\u540c\u4e00\u5f20\u8868\uff0c\u901a\u8fc7\u4e0d\u540c\u7684\u89d2\u5ea6\u53bb\u770b\u3002</p> <p>\u521b\u5efa\u89c6\u56fe\uff1a<code>create view &lt;viewname&gt; as &lt;select statement&gt;;</code></p> <p>\u5220\u9664\u89c6\u56fe\uff1a<code>drop view &lt;viewname&gt;;</code></p> <p>\u5bf9\u89c6\u56fe\u8fdb\u884c\u589e\u5220\u67e5\u6539\u4f1a\u5f71\u54cd\u5230\u539f\u8868\u4e2d\u7684\u6570\u636e\uff0c\u901a\u8fc7\u89c6\u56fe\u5f71\u54cd\u539f\u8868\u7684\u6570\u636e\u800c\u4e0d\u662f\u76f4\u63a5\u64cd\u4f5c\u539f\u8868\u7684\u6570\u636e\uff0c\u56e0\u800c\u89c6\u56fe\u53ef\u4ee5\u9690\u85cf\u539f\u8868\u7684\u5b9e\u73b0\u7ec6\u8282\u3002</p>"},{"location":"basic-concepts-of-mysql/#dba\u547d\u4ee4","title":"DBA\u547d\u4ee4","text":"<p>\u5c06\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u5bfc\u51fa\uff1a</p> <p><code>mysqldump &lt;dbname&gt; &gt; &lt;filename&gt;.sql -uroot -p;</code></p> <p><code>mysqldump &lt;dbname&gt; &lt;tablename&gt; &gt; &lt;filename&gt;.sql -uroot -p;</code></p>"},{"location":"basic-concepts-of-mysql/#\u6570\u636e\u5e93\u8bbe\u8ba1\u4e09\u8303\u5f0f","title":"\u6570\u636e\u5e93\u8bbe\u8ba1\u4e09\u8303\u5f0f","text":"<p>\u8bbe\u8ba1\u6570\u636e\u8868\u7684\u4f9d\u636e\uff0c\u6309\u7167\u4e09\u8303\u5f0f\u8bbe\u8ba1\u7684\u6570\u636e\u8868\u4e0d\u4f1a\u51fa\u73b0\u6570\u636e\u5197\u4f59\u3002</p> <ul> <li>\u7b2c\u4e00\u8303\u5f0f\uff1a\u4efb\u4f55\u4e00\u5f20\u8868\u90fd\u5e94\u8be5\u6709\u4e3b\u952e\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u5e94\u8be5\u662f\u539f\u5b50\u6027\u7684\uff0c\u4e0d\u53ef\u518d\u5206\u3002</li> <li>\u7b2c\u4e8c\u8303\u5f0f\uff1a\u5efa\u7acb\u5728\u7b2c\u4e00\u8303\u5f0f\u7684\u57fa\u7840\u4e0a\uff0c\u6240\u6709\u975e\u4e3b\u952e\u5b57\u6bb5\u5b8c\u5168\u4f9d\u8d56\u4e3b\u952e\uff0c\u4e0d\u80fd\u4ea7\u751f\u90e8\u5206\u4f9d\u8d56\u3002(\u591a\u5bf9\u591a\uff0c\u4e09\u5f20\u8868\uff0c\u5173\u7cfb\u8868\u4e24\u4e2a\u5916\u952e)</li> <li>\u7b2c\u4e09\u8303\u5f0f\uff1a\u5efa\u7acb\u5728\u7b2c\u4e8c\u8303\u5f0f\u7684\u57fa\u7840\u4e0a\uff0c\u6240\u6709\u975e\u4e3b\u952e\u5b57\u6bb5\u76f4\u63a5\u4f9d\u8d56\u4e3b\u952e\uff0c\u4e0d\u80fd\u4ea7\u751f\u4f20\u9012\u4f9d\u8d56\u3002(\u4e00\u5bf9\u591a\uff0c\u4e24\u5f20\u8868\uff0c\u591a\u7684\u8868\u52a0\u5916\u952e)</li> </ul> <p>(\u4e00\u5bf9\u4e00\uff0c\u4e3b\u952e\u5171\u4eab\uff0c\u4e3b\u952e\u4e5f\u662f\u5916\u952e\uff0c\u5916\u952e\u552f\u4e00\uff0c\u5916\u952e\u52a0\u4e0a\u552f\u4e00\u7ea6\u675f)</p>"},{"location":"basic-usage-of-lambda-in-cplusplus/","title":"C++\u4e0elambda\u51fd\u6570","text":"<p>\u4eceC++11\u5f00\u59cb\uff0c\u5229\u7528lambda\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5c31\u5730\u6784\u9020\u53ef\u8c03\u7528\u51fd\u6570\u5bf9\u8c61\u6216\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u5176\u4ed6\u51fd\u6570\u3002Lambda\u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5\u5341\u5206\u8f7b\u91cf\uff0c\u4e0d\u9700\u8981\u50cf\u666e\u901a\u51fd\u6570\u4e00\u6837\u5728\u5934\u6587\u4ef6\u4e2d\u8fdb\u884c\u58f0\u660e\uff0c\u7f16\u5199\u7684\u4ee3\u7801\u66f4\u52a0\u6613\u4e8e\u7406\u89e3\u548c\u7ef4\u62a4\u3002</p>"},{"location":"basic-usage-of-lambda-in-cplusplus/#\u7ec4\u6210\u90e8\u5206","title":"\u7ec4\u6210\u90e8\u5206","text":"<ol> <li>\u6355\u83b7\u5217\u8868\uff1acapture clause (Also known as the lambda-introducer in the C++ specification.)</li> <li>\u53c2\u6570\u5217\u8868\uff1aparameter list (Also known as the lambda declarator.)</li> <li>\u53ef\u53d8\u89c4\u683c\uff1amutable specification</li> <li>\u5f02\u5e38\u89c4\u683c\uff1aexception specification</li> <li>\u5c3e\u968f\u8fd4\u56de\u7c7b\u578b\uff1atailing return type</li> <li>Lambda\u8868\u8fbe\u5f0f\u6267\u884c\u4f53\uff1alambda body</li> </ol> <p>\u5176\u4e2d\uff0c2\u30013\u30014\u548c5\u4e3a\u53ef\u9009\u9879\u3002</p>"},{"location":"basic-usage-of-lambda-in-cplusplus/#\u53d8\u91cf\u6355\u83b7","title":"\u53d8\u91cf\u6355\u83b7","text":"<p>\u6355\u83b7\u5217\u8868\u7528\u4e8e\u6355\u83b7lambda\u8868\u8fbe\u5f0f\u5916\u90e8\u7684\u53d8\u91cf\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u53d8\u91cf\u5728\u8868\u8fbe\u5f0f\u5185\u90e8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002\u6309\u53d8\u91cf\u6355\u83b7\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5206\u4e3a\u503c\u6355\u83b7\u548c\u5f15\u7528\u6355\u83b7\u4e24\u79cd\u7c7b\u578b\u3002\u5177\u4f53\u7684\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>[]         // \u4e0d\u6355\u83b7\u4efb\u4f55\u53d8\u91cf\n[&amp;]        // \u6309\u5f15\u7528\u7684\u65b9\u5f0f\u6355\u83b7\u6240\u6709\u5916\u90e8\u53d8\u91cf - \u7c7b\u6bd4\u5f15\u7528\u4f20\u9012\n[=]        // \u6309\u503c\u7684\u65b9\u5f0f\u6355\u83b7\u6240\u6709\u5916\u90e8\u53d8\u91cf - \u7c7b\u6bd4\u503c\u4f20\u9012\n[&amp;, var]   // \u9ed8\u8ba4\u4e3a\u5f15\u7528\u6355\u83b7 var\u4f7f\u7528\u503c\u6355\u83b7\n[=, &amp;var]  // \u9ed8\u8ba4\u4e3a\u503c\u6355\u83b7 var\u4f7f\u7528\u5f15\u7528\u6355\u83b7\n[var, var] // \u91cd\u590d\u6355\u83b7 \u65e0\u5b9e\u9645\u610f\u4e49 \u7f16\u8bd1\u65f6warning\n[&amp;, &amp;var]  // \u91cd\u590d\u6355\u83b7 \u65e0\u5b9e\u9645\u610f\u4e49 \u7f16\u8bd1\u65f6warning\n[=, this]  // \u91cd\u590d\u6355\u83b7 \u65e0\u5b9e\u9645\u610f\u4e49 \u7f16\u8bd1\u65f6warning\n[this]     // \u503c\u6355\u83b7this\u6307\u9488 \u76f8\u5f53\u4e8e\u5f15\u7528\u6355\u83b7\u4e86this\u6240\u6307\u5bf9\u8c61\n[*this]    // \u503c\u6355\u83b7this\u6240\u6307\u5bf9\u8c61 since C++17\n</code></pre> <p>\u8003\u8651\u6027\u80fd\uff0c\u5728\u8fdb\u884c\u53d8\u91cf\u6355\u83b7\u65f6\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ul> <li><code>[&amp;]</code>\u548c<code>[=]</code>\u4e24\u79cd\u65b9\u5f0f\u4e0d\u63a8\u8350\u4f7f\u7528\uff0c\u53ef\u80fd\u5bf9\u6027\u80fd\u9020\u6210\u8f83\u5927\u5f71\u54cd\uff0c\u5e94\u660e\u786e\u6307\u51fa\u9700\u8981\u6355\u83b7\u7684\u53d8\u91cf\uff1b</li> <li>\u503c\u6355\u83b7\u7684\u53d8\u91cf\u5728lambda\u8868\u8fbe\u5f0f\u4f5c\u7528\u57df\u5185\u9ed8\u8ba4\u662fread-only(const)\uff1b\u82e5\u9700\u8981\u8fdb\u884c\u4fee\u6539\u9700\u8981\u4f7f\u7528<code>mutable</code>\u5173\u952e\u5b57\uff1b</li> <li>\u503c\u6355\u83b7\u7684\u53d8\u91cf\u5728lambda\u8868\u8fbe\u5f0f\u4f5c\u7528\u57df\u5185\u5916\u662f\u4e0d\u540c\u7684\uff0c\u5728lambda\u8868\u8fbe\u5f0f\u5185\u90e8\u4fee\u6539\u503c\u6355\u83b7\u53d8\u91cf\u4e0d\u4f1a\u5f71\u54cd\u5916\u90e8\u7684\u503c\uff1b</li> <li>\u5728\u6210\u5458\u51fd\u6570\u4e2d\u4f7f\u7528lambda\u8868\u8fbe\u5f0f\u5e76\u6355\u83b7\u4e86this\u6307\u9488\u540e\uff0c\u9700\u8981\u989d\u5916\u5173\u6ce8\u5bf9\u8c61\u4e4b\u95f4\u7684\u751f\u547d\u5468\u671f\u662f\u5426\u540c\u6b65\u3002</li> </ul>"},{"location":"basic-usage-of-lambda-in-cplusplus/#\u5e7f\u4e49lambda\u6355\u83b7","title":"\u5e7f\u4e49lambda\u6355\u83b7","text":"<p>C++14\u6807\u51c6\u6269\u5c55\u4e86lambda\u8868\u8fbe\u5f0f\u4e2d\u7684\u53d8\u91cf\u6355\u83b7\uff1a\u53ef\u4ee5\u5728\u6355\u83b7\u5217\u8868\u4e2d\u521d\u59cb\u5316lambda\u8868\u8fbe\u5f0f\u4e2d\u7684\u53d8\u91cf\u3002\u8fd9\u4f7f\u5f97\u90a3\u4e9b\u65e0\u6cd5\u8fdb\u884c\u62f7\u8d1d\u6784\u9020\u7684\u53d8\u91cf\u53ef\u4ee5\u901a\u8fc7<code>std::move</code>\u7684\u65b9\u5f0f\u6355\u83b7\u5230lambda\u8868\u8fbe\u5f0f\u4e2d\u3002</p> <pre><code>// \u4e0b\u9762\u7684\u4ee3\u7801\u5c06\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1std::unique_ptr\u65e0\u6cd5\u62f7\u8d1d\u6784\u9020\u548c\u62f7\u8d1d\u8d4b\u503c\n#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\n// C++11\u65e0\u6cd5\u4f7f\u7528std::make_unique\ntemplate&lt;typename T, typename... Ts&gt;\nstd::unique_ptr&lt;T&gt; make_unique(Ts&amp;&amp;... params) {\n    return std::unique_ptr&lt;T&gt;(new T(std::forward&lt;Ts&gt;(params)...));\n}\n\nint main(int argc, char* argv[]) {\n    auto pva = make_unique&lt;int&gt;(10);\n    auto f = [pva]() {\n        std::cout &lt;&lt; *pva &lt;&lt; \"\\n\";\n    };\n\n    f();\n    return 0;\n}\n\n// error: call to implicitly-deleted copy constructor of 'std::unique_ptr&lt;int&gt;'\n</code></pre> <pre><code>// C++14\u4e2d\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1\u5e76\u6b63\u5e38\u8fd0\u884c\n#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\ntemplate&lt;typename T, typename... Ts&gt;\nstd::unique_ptr&lt;T&gt; make_unique(Ts&amp;&amp;... params) {\n    return std::unique_ptr&lt;T&gt;(new T(std::forward&lt;Ts&gt;(params)...));\n}\n\nint main(int argc, char* argv[]) {\n    auto pva = make_unique&lt;int&gt;(10);\n    auto f = [pva = std::move(pva)]() {\n        std::cout &lt;&lt; *pva &lt;&lt; \"\\n\";\n    };\n\n    f();\n    return 0;\n}\n</code></pre>"},{"location":"basic-usage-of-lambda-in-cplusplus/#\u6cdb\u578blambda","title":"\u6cdb\u578blambda","text":"<p>C++14\u5f00\u59cb\u652f\u6301lambda\u8868\u8fbe\u5f0f\u7684\u8f93\u5165\u53c2\u6570\u4e3a<code>auto</code>\u7c7b\u578b\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nint main(int argc, char* argv[]) {\n    auto less = [](const auto&amp; v1, const auto&amp; v2) {\n        return v1 &lt; v2;\n    };\n\n    std::vector&lt;int&gt; va1{ 1, 4, 3, 5, 2 };\n    std::sort(va1.begin(), va1.end(), less);\n\n    std::vector&lt;double&gt; va2{ 1.2, 1., 1.4, 1.1, 1.3 };\n    std::sort(va2.begin(), va2.end(), less);\n\n    return 0;\n}\n</code></pre>"},{"location":"basic-usage-of-lambda-in-cplusplus/#\u7acb\u5373\u8c03\u7528lambda","title":"\u7acb\u5373\u8c03\u7528lambda","text":"<p>Lambda\u8868\u8fbe\u5f0f\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u88ab\u7acb\u5373\u8c03\u7528\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nint main(int argc, char* argv[]) {\n    int va = 10;\n    [va]() {\n        std::cout &lt;&lt; va &lt;&lt; \"\\n\";\n    }();\n\n    return 0;\n}\n</code></pre>"},{"location":"basic-usage-of-lambda-in-cplusplus/#lambda\u8868\u8fbe\u5f0f\u7684\u539f\u7406","title":"Lambda\u8868\u8fbe\u5f0f\u7684\u539f\u7406","text":"<pre><code>#include &lt;iostream&gt;\n\nint main(int argc, char* argv[]) {\n    int va = 10;\n    auto f = [va]() {\n        std::cout &lt;&lt; va &lt;&lt; \"\\n\";\n    };\n\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(int argc, char* argv[]) {\n    int va = 10;\n\n    class __lambda_6_14 {\n    public:\n        inline void operator()() const {\n            std::operator&lt;&lt;(std::cout.operator&lt;&lt;(va), \"\\n\");\n        }\n\n    private:\n        int va;\n    public:\n        // inline /*constexpr */ __lambda_6_14(__lambda_6_14 &amp;&amp;) noexcept = default;\n        __lambda_6_14(int&amp; _va)\n            : va{ _va }\n        {}\n    };\n\n    __lambda_6_14 f = __lambda_6_14(__lambda_6_14{ va });\n    f.operator()();\n    return 0;\n}\n</code></pre>"},{"location":"basic-usage-of-lambda-in-cplusplus/#\u95ed\u5305\u7684\u7406\u89e3","title":"\u95ed\u5305\u7684\u7406\u89e3","text":"<p>Scott Meyers\u5c06lambda\u8868\u8fbe\u5f0f\u548c\u95ed\u5305\u4e4b\u95f4\u7684\u5173\u7cfb\u6bd4\u4f5c\u7c7b\u4e0e\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a</p> <p>The distinction between a lambda and the corresponding closure is precisely equivalent to the distinction between a class and an instance of the class. A class exists only in source code; it doesn\u2019t exist at runtime. What exists at runtime are objects of the class type. Closures are to lambdas as objects are to classes. This should not be a surprise, because each lambda expression causes a unique class to be generated (during compilation) and also causes an object of that class type\u2013a closure\u2013to be created (at runtime).</p> <p>\u95ed\u5305\uff0c Closure\uff0c\u662f\u5728\u652f\u6301first class citizen\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5b9e\u73b0\u7684\u4e00\u79cd\u8bcd\u6cd5\u7ed1\u5b9a\u6280\u672f\u3002\u6240\u8c13first class citizen\uff0c\u662f\u6307\u51fd\u6570\u80fd\u591f\u4f5c\u4e3a\u5176\u4ed6\u51fd\u6570\u7684\u53c2\u6570\u3001\u8fd4\u56de\u503c\u3001\u8d4b\u503c\u7ed9\u53d8\u91cf\u6216\u5b58\u50a8\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u3002</p> <p>\u5b9e\u73b0\u4e0a\uff0c\u95ed\u5305\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u5173\u8054\u7684\u73af\u5883\u3002\u5176\u4e2d\uff0c\u51fd\u6570\u662f\u95ed\u5305\u7684\u5165\u53e3\uff1b\u5173\u8054\u7684\u73af\u5883\u5219\u5305\u542b\u5185\u5c42\u903b\u8f91\u6d41\u548c\u4ece\u5916\u90e8\u6355\u83b7\u5f97\u5230\u7684\u81ea\u7531\u53d8\u91cf\u3002\u533a\u522b\u95ed\u5305\u548c\u51fd\u6570\u7684\u5173\u952e\u662f\uff1a\u95ed\u5305\u7684\u81ea\u7531\u53d8\u91cf\u5728\u6355\u83b7\u65f6\u5373\u88ab\u786e\u5b9a\uff0c\u90a3\u4e48\u95ed\u5305\u5c31\u80fd\u591f\u4f7f\u7528\u81ea\u7531\u53d8\u91cf\u548c\u5185\u90e8\u903b\u8f91\u6d41\u5b8c\u6210\u8fd0\u884c\uff0c\u800c\u4e0d\u4f9d\u8d56\u6355\u83b7\u65f6\u7684\u4e0a\u4e0b\u6587\u3002</p> <p>\u7b80\u5355\u6765\u8bf4\uff0c\u95ed\u5305\u5c31\u662f\u6307\u90a3\u4e9b\u53ef\u4ee5\u81ea\u7531\u8bbf\u95ee\u5916\u5c42\u4f5c\u7528\u57df\u81ea\u7531\u53d8\u91cf\u7684\u51fd\u6570\u3002</p> <p>C++11\u4e4b\u524d\uff0c\u95ed\u5305\u662f\u4e0d\u88ab\u8bed\u8a00\u672c\u8eab\u652f\u6301\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u4eff\u51fd\u6570\u6765\u6a21\u62df\uff0c\u4e0d\u8fc7\u5199\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\u3002C++11\u652f\u6301\u7684\u533f\u540d\u51fd\u6570\u5219\u5b8c\u5168\u7b26\u5408\u95ed\u5305\u7684\u5b9a\u4e49\uff0c\u6269\u5c55\u4e86C++\u8bed\u8a00\u7684\u8fb9\u754c\u3002\u6b64\u5916\uff0cC++11\u63d0\u4f9b\u7684<code>std::bind</code>\u8bed\u6cd5\u7cd6\u4e5f\u80fd\u591f\u4f7f\u7528\u5360\u4f4d\u7b26\u548c\u666e\u901a\u51fd\u6570\u6784\u9020\u51fa\u95ed\u5305\u3002</p> <p>\u6ce8\uff1a\u5173\u4e8e\u95ed\u5305\u7684\u5b9a\u4e49\u5176\u5b9e\u6bd4\u8f83\u6666\u6da9\uff0c\u53ef\u4ee5\u770b\u6587\u672b\u7684\u53c2\u8003\u6587\u732e\u7406\u89e3\u4e0b\u3002</p>"},{"location":"basic-usage-of-lambda-in-cplusplus/#\u53c2\u8003\u94fe\u63a5","title":"\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>Lambda expressions (since C++11)</li> <li>c++\u4e2dlambda\u8868\u8fbe\u5f0f\u7528\u6cd5</li> <li>C++ \u4e2d\u7684 Lambda \u8868\u8fbe\u5f0f</li> <li>Closure (computer programming)</li> <li>C++11\u4e2d\u7684\u533f\u540d\u51fd\u6570(lambda\u51fd\u6570,lambda\u8868\u8fbe\u5f0f)</li> <li>\u3010C++\u3011\u4f7f\u7528\u53ef\u53d8lambda, mutable\u5173\u952e\u5b57</li> <li>C++14#Generic_lambdas</li> <li>C++ \u95ed\u5305\u548c\u533f\u540d\u51fd\u6570</li> <li>C++\u7684\u95ed\u5305(closure)</li> <li>First-class function</li> <li>JavaScript\u95ed\u5305\u7684\u90a3\u4e9b\u4e8b~</li> <li>closure\uff08\u95ed\u5305\uff09\u3001\u4eff\u51fd\u6570\u3001std::function\u3001bind\u3001lambda</li> <li>C++ 17 constexpr \u8207 Lambda \u8868\u9054\u5f0f</li> <li>constexpr lambda expressions in C++</li> <li>C++ lambda\u8868\u8fbe\u5f0f\u4e0e\u51fd\u6570\u5bf9\u8c61</li> <li>\u8bed\u8a00\u8fd0\u884c\u671f\u7684\u5f3a\u5316#\u6cdb\u578b-Lambda</li> <li>C++ lambda\u8868\u8fbe\u5f0f\u6559\u7a0b</li> </ul>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/","title":"C++\u591a\u7ebf\u7a0b\u7f16\u7a0b\u57fa\u7840","text":"<p>\u4ece11\u6807\u51c6\u5f00\u59cb\uff0cC++\u63d0\u4f9b\u4e86\u8bf8\u5982<code>std::thread</code>\u7684\u591a\u7ebf\u7a0b\u57fa\u7840\u8bbe\u65bd\u3002\u867d\u7136\u4e00\u4e9b\u62bd\u8c61\u5c42\u6b21\u8f83\u4f4e\u7684\u63a5\u53e3\u51e0\u4e4e\u4e0d\u4f1a\u51fa\u73b0\u5728\u843d\u5730\u7684\u9879\u76ee\u4e2d\uff0c\u4f46\u80fd\u591f\u638c\u63e1\u4ed6\u4eec\u7684\u4f7f\u7528\u662f\u6709\u52a9\u4e8e\u52a0\u6df1\u5bf9\u591a\u7ebf\u7a0b\u7f16\u7a0b\u7684\u7406\u89e3\u7684\u3002</p> <p>\u672c\u6587\u4ece\u56de\u8c03\u51fd\u6570\uff0c\u591a\u7ebf\u7a0b\u7f16\u7a0b\u63a5\u53e3\uff0c\u548c\u6570\u636e\u540c\u6b65\u4e09\u4e2a\u65b9\u9762\u4ecb\u7ecdC++\u591a\u7ebf\u7a0b\u7f16\u7a0b\u7684\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6\u548c\u7528\u6cd5\u3002\u5728\u672c\u6587\u7684\u6700\u540e\uff0c\u8fd8\u4f1a\u9644\u4e0a\u4e00\u4e9b\u53ef\u7528\u4e8e\u5b8c\u6210\u591a\u7ebf\u7a0b\u7f16\u7a0b\u7684\u7b2c\u4e09\u65b9\u5e93\u3002</p>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#\u56de\u8c03\u51fd\u6570","title":"\u56de\u8c03\u51fd\u6570","text":""},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#\u7406\u89e3\u56de\u8c03\u51fd\u6570","title":"\u7406\u89e3\u56de\u8c03\u51fd\u6570","text":"<p>\u56de\u8c03\u51fd\u6570\u5728\u5f02\u6b65\u64cd\u4f5c\u4e2d\u5341\u5206\u5e38\u89c1\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cC++\u8fdb\u7a0b\u4f1a\u521b\u5efa\u7ebf\u7a0b\u6c60\u8fdb\u884c\u591a\u4e2a\u5f02\u6b65\u64cd\u4f5c\u3002\u56de\u8c03\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u5728\u4e8e\u5c06\u539f\u672c\u540c\u6b65\u7684\u4e1a\u52a1\u903b\u8f91\u5305\u88c5\u6210\u4e3a\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u540e\u7eed\u53ea\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7a7a\u95f2\u7ebf\u7a0b\u5904\u7406\u5373\u53ef\u5b8c\u6210\u5f02\u6b65\u64cd\u4f5c\u3002</p> <p>\u5728\u7406\u89e3\u56de\u8c03\u51fd\u6570\u65f6\uff0c\u5e94\u5f53\u8003\u8651\u5230\u8fdb\u7a0b\u4f7f\u7528\u4e8b\u4ef6\u5faa\u73af\u7684\u6a21\u578b\uff1a\u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u7b80\u5355\u7684\u7406\u89e3\u4e3a\u4e00\u4e2a\u6b7b\u5faa\u73af\uff0c\u5f53\u4e8b\u4ef6\u961f\u5217\u4e2d\u5b58\u5728\u672a\u5904\u7406\u7684\u4e8b\u4ef6\u65f6\uff0c\u5faa\u73af\u5c06\u4f1a\u6839\u636e\u7c7b\u578b\uff0c\u6307\u5b9a\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u53bb\u5904\u7406\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u5176\u5b9e\u8fd9\u91cc\u7684\u4e8b\u4ef6\u5c31\u662f\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u3002\u4e0b\u9762\u4ee5\u4e00\u4e2a\u8bfb\u6587\u4ef6\u7684\u64cd\u4f5c\u4e3a\u4f8b\uff0c\u5c55\u793a\u540c\u6b65\u548c\u5f02\u6b65\u4e24\u79cd\u65b9\u5f0f\u8bfb\u53d6\u6587\u4ef6\u7684\u8fc7\u7a0b\u3002</p> <pre><code>#include &lt;unistd.h&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;thread&gt;\n\n#define USE_SYNC 0\n\nint ReadFile(const std::string&amp; filename, std::string&amp; content) {\n  auto Deleter = [](FILE* fp) { fclose(fp); };\n  std::unique_ptr&lt;FILE, decltype(Deleter)&gt; fp(fopen(filename.c_str(), \"r\"),\n                                              Deleter);\n  if (!fp.get()) {\n    return 1;\n  }\n\n  fseek(fp.get(), 0, SEEK_END);\n  long fsize = ftell(fp.get());\n  rewind(fp.get());\n\n  auto buffer = std::make_unique&lt;char[]&gt;(fsize);\n  int rsize = fread(buffer.get(), 1, fsize, fp.get());\n  if (rsize != fsize) {\n    return 1;\n  }\n\n  content = std::string(reinterpret_cast&lt;const char*&gt;(buffer.get()), fsize);\n  return 0;\n}\n\nvoid AsyncReadFile(const std::string&amp; filename,\n                   std::function&lt;void(int, std::string&amp;)&gt; callback) {\n  std::string content;\n  int code = ReadFile(filename, content);\n  callback(code, content);\n}\n\nint main(int argc, char* argv[]) {\n  std::string home = std::getenv(\"HOME\");\n  const std::string filename = home + \"/.zshrc\";\n  std::string content;\n\n#if USE_SYNC\n  if (0 != ReadFile(filename, content)) {\n    std::cerr &lt;&lt; \"ERROR: cannot read file synchronously.\" &lt;&lt; std::endl;\n  }\n#else\n  auto callback = [&amp;content](int code, std::string&amp; fcontent) {\n    if (code == 0) {\n      content.swap(fcontent);\n    } else {\n      std::cerr &lt;&lt; \"ERROR: cannot read file asynchronously.\" &lt;&lt; std::endl;\n    }\n  };\n\n  std::thread t(AsyncReadFile, filename, callback);\n  // \u963b\u585e\u7b49\u5f85\n  if (t.joinable()) {\n    t.join();\n  }\n#endif  // USE_SYNC\n\n  std::cout &lt;&lt; \"content -&gt; [\" &lt;&lt; content &lt;&lt; \"]\" &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre> <p>\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f</p> <p>\u8fd9\u91cc\u5176\u5b9e\u6ca1\u6709\u8003\u8651\u8bf8\u5982\uff1a<code>content</code>\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\uff0c<code>content</code>\u662f\u5426\u5b58\u5728\u591a\u4f59\u7684\u62f7\u8d1d\u884c\u4e3a\uff0c\u8bfb\u6587\u4ef6\u8017\u65f6\u64cd\u4f5c\u662f\u5426\u4f1a\u51fa\u73b0\u65f6\u5e8f\u4e0d\u4e00\u81f4\u7b49\u95ee\u9898\u3002\u5b9e\u9645\u7684\u5f00\u53d1\u8fc7\u7a0b\u5f80\u5f80\u8981\u6bd4\u8fd9\u4e2a\u590d\u6742\u7684\u591a\u3002</p>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#stdfunction","title":"std::function","text":"<p><code>std::function</code>\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u7684\u5305\u88c5\uff0c\u4f7f\u5f97\u51fd\u6570\u80fd\u591f\u50cf\u53c2\u6570\u4e00\u6837\u88ab\u4f20\u9012<sup>2</sup>\u3002<code>std::function</code>\u5bf9\u8c61\u53ef\u4ee5\u6307\u5411\u4eff\u51fd\u6570\u3001lambda\u51fd\u6570\u3001\u5176\u4ed6\u51fd\u6570\u5bf9\u8c61\u7b49\uff1b<code>std::function</code>\u662f\u4e00\u4e2a\u6a21\u677f\u7c7b\uff0c\u5176\u7c7b\u578b\u4f1a\u6839\u636e\u6a21\u677f\u53c2\u6570\u7684\u4e0d\u540c\u800c\u4e0d\u540c\uff1a<code>std::function&lt;void()&gt;</code>\u548c <code>std::function&lt;void(int)&gt;</code>\u5c31\u4e24\u79cd\u4e0d\u540c\u7684 <code>std::function</code>\u3002</p> <p>\u6b64\u5916\uff0c\u5982\u679c <code>std::function</code>\u7684\u7c7b\u578b\u4e0e\u9700\u8981\u5305\u88c5\u7684\u51fd\u6570\u53c2\u6570\u5e76\u4e0d\u76f8\u540c\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>std::bind</code>\u8fdb\u884c\u7ed1\u5b9a\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nint main(int argc, char* argv[]) {\n  auto lambda = [](int v1, int v2) { return v1 + v2; };\n  // |func(v)| equals to |lambda(1, v)|\n  std::function&lt;int(int)&gt; func = std::bind(lambda, 1, std::placeholders::_1);\n  std::cout &lt;&lt; func(1) &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre> <p>\u540e\u6587\u4e2d\uff0c\u540d\u8bcd\u7ebf\u7a0b\u6267\u884c\u4f53\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c31\u8868\u793a\u4e00\u4e2a <code>std::function</code>\u5bf9\u8c61\uff0c\u6216\u8005\u662f\u4e00\u4e2alambda\u51fd\u6570\u3002</p>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#\u591a\u7ebf\u7a0b\u7f16\u7a0b\u63a5\u53e3","title":"\u591a\u7ebf\u7a0b\u7f16\u7a0b\u63a5\u53e3","text":"<p>C++11\u4e2d\u63d0\u4f9b\u4e86\u591a\u4e2a\u7528\u4e8e\u591a\u7ebf\u7a0b\u7f16\u7a0b\u7684\u63a5\u53e3\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u66f4\u52a0\u65b9\u4fbf\u7684\u64cd\u4f5c\u7ebf\u7a0b\u3002\u6309\u7167\u4ece\u4f4e\u5230\u9ad8\u7684\u62bd\u8c61\u5c42\u6b21\uff0c\u8fd9\u4e9b\u63a5\u53e3\u53ef\u4ee5\u5206\u7c7b\u4e3a\u4e0b\u9762\u7684\u7b49\u7ea7\u3002\u901a\u8fc7\u4e0d\u540c\u7a0b\u5ea6\u7684\u5305\u88c5\uff0c\u63a5\u53e3\u9010\u6e10\u53d8\u5f97\u62bd\u8c61\uff0c\u5f00\u53d1\u8005\u4e5f\u53ef\u4ee5\u5c06\u81ea\u5df1\u7684\u6ce8\u610f\u529b\u8f6c\u79fb\u5230\u4efb\u52a1\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u5982\u4f55\u64cd\u4f5c\u7ebf\u7a0b\u4e0a\u3002</p> <ul> <li><code>std::thread</code>\u3002</li> <li><code>std::thread</code>\uff0c<code>std::future</code>\uff0c<code>std::promise</code>\u3002</li> <li><code>std::thread</code>\uff0c<code>std::future</code>\uff0c<code>std::packaged_task</code>\u3002</li> <li><code>std::future</code>\uff0c<code>std::async</code>\u3002</li> </ul> <p></p>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#stdthread","title":"std::thread","text":"<p><code>std::thread</code>\u662fC++\u591a\u7ebf\u7a0b\u7f16\u7a0b\u4e2d\u6700\u4e3a\u57fa\u7840\u7684\u7c7b\uff0c\u4ed6\u662f\u5bf9\u7cfb\u7edf\u5e73\u53f0\u7ebf\u7a0b\u5e93\u7684\u5c01\u88c5\u3002<code>std::thread</code>\u63a5\u53e3\u6709\u5982\u4e0b\u7684\u4e00\u4e9b\u7279\u70b9\u3002</p> <ol> <li><code>std::thread</code>\u6784\u9020\u65f6\u4f20\u9012\u7a7a\u53c2\u6570\u4f1a\u5f97\u5230\u4e00\u4e2a\u7a7a\u7684\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4e0d\u8868\u793a\u4efb\u4f55\u7ebf\u7a0b\u5b9e\u4f53\u3002</li> <li><code>std::thread</code>\u6ca1\u6709 <code>start</code>\u65b9\u6cd5\uff0c\u975e\u7a7a\u5bf9\u8c61\u6784\u9020\u6210\u529f\u540e\uff0c\u5bf9\u8c61\u8868\u793a\u7684\u7ebf\u7a0b\u5b9e\u4f53\u5c31\u5df2\u7ecf\u542f\u52a8\u8fd0\u884c\u4e86\u3002</li> <li><code>std::thread</code>\u6ca1\u6709\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u8fd0\u7b97\u7b26\uff0c\u65e0\u6cd5\u8ba9\u4e24\u4e2a\u5bf9\u8c61\u6307\u5411\u540c\u4e00\u4e2a\u7ebf\u7a0b\u5b9e\u4f53\u3002</li> <li><code>std::thread</code>\u5bf9\u8c61\u5bf9\u7ebf\u7a0b\u5b9e\u4f53\u7684\u6301\u6709\u53ef\u4ee5\u4f7f\u7528 <code>std::move</code>\u8f6c\u79fb\uff0c\u8f6c\u79fb\u540e\u539f\u5bf9\u8c61\u5c31\u4e0d\u518d\u8868\u793a\u4efb\u4f55\u7ebf\u7a0b\u5b9e\u4f53\u3002</li> <li><code>std::thread</code>\u5bf9\u8c61\u6784\u9020\u540e\uff0c\u53ef\u4ee5 <code>join</code>\u6216 <code>detach</code>\u3002<code>join</code>\u65b9\u6cd5\u4f1a\u7b49\u5f85\u7ebf\u7a0b\u6267\u884c\u5b8c\u6210\u540e\u518d\u7ee7\u7eed\uff1b<code>detach</code>\u65b9\u6cd5\u5219\u4e0d\u4f1a\u7b49\u5f85\u3002</li> </ol> <pre><code>std::thread t1;  // \u7a7a\u7ebf\u7a0b\u5bf9\u8c61\nstd::thread t2([](const std::string&amp; s) {\n  std::cout &lt;&lt; s &lt;&lt; std::endl;\n  // wait for 2s.\n}, \"Hello World!\");  // \u4f7f\u7528lambda\u51fd\u6570\u4f5c\u4e3a\u8fd0\u884c\u5b9e\u4f53 \u5e76\u4f20\u9012\u4e86\u4e00\u4e2astring\u7c7b\u578b\u7684\u53c2\u6570\nt1 = std::move(t2);  // \u7ebf\u7a0b\u6240\u6709\u6743\u8f6c\u79fb\u81f3t1 t2\u4e0d\u518d\u8868\u793a\u4efb\u4f55\u7ebf\u7a0b\u5b9e\u4f53\nif (t1.joinable()) {  // \u5982\u679ct1\u8fd8\u5728\u8fd0\u884c \u53efjoin \u90a3\u5c31\u7b49\u5f85t1\u6267\u884c\u5b8c\u6210\n  t1.join();\n}\n</code></pre>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#stdfuturestdpromise","title":"std::future/std::promise","text":"<p>\u76f4\u63a5\u4f7f\u7528 <code>std::thread</code>\u5b8c\u6210\u591a\u7ebf\u7a0b\u7f16\u7a0b\u662f\u5b8c\u5168\u53ef\u884c\u7684\uff0c\u7ebf\u7a0b\u6267\u884c\u4f53\u53ef\u4ee5\u5341\u5206\u65b9\u4fbf\u7684\u5728\u521b\u5efa\u7ebf\u7a0b\u65f6\u4f20\u9012\u53c2\u6570\u3002\u7136\u800c\uff0c\u8003\u8651\u5230\u8fd4\u56de\u503c\u65f6\uff0c<code>std::thread</code>\u7684\u64cd\u4f5c\u5c31\u5341\u5206\u522b\u626d\u3002\u901a\u5e38\u7684\u505a\u6cd5\u662f\uff1a\u5728\u7ebf\u7a0b\u542f\u52a8\u524d\u7ea6\u5b9a\u597d\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4\u7528\u4e8e\u5b58\u50a8\u7ed3\u679c\uff0c\u7136\u540e\u5c06\u6307\u5411\u8be5\u5185\u5b58\u7a7a\u95f4\u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u5230 <code>std::thread</code>\u5bf9\u8c61\u4e2d\uff0c\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5\u540e\u5199\u5165\u7ed3\u679c\uff0c\u6700\u540e\u5176\u4ed6\u7ebf\u7a0b\u4f7f\u7528\u6307\u9488\u8bfb\u53d6\u7ed3\u679c\u3002\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bfb\u53d6\u4e00\u4e2a\u5185\u5b58\u533a\u57df\u9700\u8981\u6570\u636e\u4fdd\u62a4\u548c\u540c\u6b65\u6765\u4fdd\u8bc1\u7ed3\u679c\u7b26\u5408\u9884\u671f\uff0c\u5728\u7a0b\u5e8f\u533a\u57df\u590d\u6742\u540e\uff0c\u7ef4\u62a4\u96be\u5ea6\u6307\u6570\u589e\u52a0\u3002</p> <p>\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5728\u7ebf\u7a0b\u4e4b\u95f4\u4f20\u9012\u9700\u8981\u7684\u7ed3\u679c\uff0cC++11\u63d0\u4f9b\u4e86 <code>std::future</code>\u548c <code>std::promise</code>\u63a5\u53e3\u6765\u5b8c\u6210\u591a\u4e2a\u7ebf\u7a0b\u7684\u6570\u636e\u4f20\u9012\u95ee\u9898\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u8fd9\u4e24\u4e2a\u63a5\u53e3\u4ec5\u63d0\u4f9b\u4e86\u7ebf\u7a0b\u4f20\u9012\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u7ebf\u7a0b\u7684\u521b\u5efa\u4f9d\u65e7\u9700\u8981 <code>std::thread</code>\u5b8c\u6210\u3002</p> <pre><code>#include &lt;future&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;thread&gt;\n#include &lt;vector&gt;\n\nint main(int argc, char* argv[]) {\n  auto accumulate = [](auto begin, auto end, std::promise&lt;int&gt; promise) {\n    int sum = std::accumulate(begin, end, 0);\n    promise.set_value(sum);\n  };\n\n  std::promise&lt;int&gt; promise;\n  std::future&lt;int&gt; fut = promise.get_future();\n\n  std::vector&lt;int&gt; v{1, 2, 3, 4, 5, 6};\n  std::thread t(accumulate, v.begin(), v.end(), std::move(promise));\n  std::cout &lt;&lt; fut.get() &lt;&lt; std::endl;\n  t.join();\n\n  return 0;\n}\n</code></pre> <p>\u867d\u7136\u4f7f\u7528 <code>std::future</code>\u548c <code>std::promise</code>\u53ef\u4ee5\u5728\u7ebf\u7a0b\u95f4\u66f4\u65b9\u4fbf\u4f20\u9012\u6570\u636e\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u9650\u5236\u3002</p> <ol> <li><code>std::future</code>\u4f7f\u7528 <code>get</code>\u65b9\u6cd5\u53d6\u56de\u6570\u636e\uff1b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u82e5 <code>std::promise</code>\u672a\u5199\u5165\u7ed3\u679c\uff0c\u7ebf\u7a0b\u5c06\u4f1a\u963b\u585e\u7b49\u5f85\u3002</li> <li><code>std::future</code>\u53ef\u4ee5\u4f7f\u7528 <code>wait</code>\uff0c<code>wait_for</code>\uff0c\u548c <code>wait_until</code>\u8fdb\u884c\u4e0d\u540c\u65b9\u5f0f\u7684\u963b\u585e\u7b49\u5f85\u3002</li> <li><code>std::future</code>\u548c <code>std::promise</code>\u4e4b\u95f4\u7684\u6570\u636e\u901a\u9053\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u591a\u6b21\u4f7f\u7528\u4f1a\u629b\u51fa\u5f02\u5e38\u3002</li> <li><code>std::future</code>\u5728\u8bed\u4e49\u4e0a\u662f\u72ec\u4eab\u7684\uff0c\u6ca1\u6709\u62f7\u8d1d\u64cd\u4f5c\uff0c\u4f46\u662f\u53ef\u4ee5\u8f6c\u79fb\uff1b\u5982\u679c\u60f3\u4f7f\u7528\u5171\u4eab\u8bed\u4e49\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>std::shared_future</code>\u3002</li> </ol> <pre><code>#include &lt;future&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;thread&gt;\n#include &lt;vector&gt;\n\nint main(int argc, char* argv[]) {\n  auto accumulate = [](auto begin, auto end, std::promise&lt;int&gt; promise) {\n    int sum = std::accumulate(begin, end, 0);\n    promise.set_value(sum);\n  };\n\n  std::promise&lt;int&gt; promise;\n  std::shared_future&lt;int&gt; fut = promise.get_future();\n\n  auto print = [&amp;fut]() {\n    fut.wait();  // block and wait\n    std::cout &lt;&lt; \"tid = [\" &lt;&lt; std::this_thread::get_id() &lt;&lt; \"] -&gt; acc = [\"\n              &lt;&lt; fut.get() &lt;&lt; \"]\" &lt;&lt; std::endl;\n  };\n\n  std::vector&lt;int&gt; v{1, 2, 3, 4, 5, 6};\n  std::thread t1(accumulate, v.begin(), v.end(), std::move(promise));\n  // Both thread want the asynchronous result.\n  std::thread t2(print);\n  std::thread t3(print);\n\n  if (t1.joinable())\n    t1.join();\n  if (t2.joinable())\n    t2.join();\n  if (t3.joinable())\n    t3.join();\n\n  return 0;\n}\n</code></pre>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#stdfuturestdpackaged_task","title":"std::future/std::packaged_task","text":"<p><code>std::packaged_task</code>\u66f4\u8fdb\u4e00\u6b65\uff0c\u5c06 <code>std::promise</code>\u548c\u7ebf\u7a0b\u6267\u884c\u4f53\u5c01\u88c5\u5728\u4e00\u8d77\uff0c\u8fdb\u4e00\u6b65\u63d0\u5347\u4e86\u591a\u7ebf\u7a0b\u7684\u7f16\u7a0b\u4f53\u9a8c\u3002</p> <pre><code>#include &lt;future&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;thread&gt;\n#include &lt;vector&gt;\n\nint main(int argc, char* argv[]) {\n  auto accumulate = [](auto begin, auto end) {\n    return std::accumulate(begin, end, 0);\n  };\n\n  std::packaged_task&lt;int(std::vector&lt;int&gt;::iterator begin,\n                         std::vector&lt;int&gt;::iterator end)&gt;\n      task(accumulate);\n  std::future&lt;int&gt; fut = task.get_future();\n\n  std::vector&lt;int&gt; v{1, 2, 3, 4, 5, 6};\n  std::thread t(std::move(task), v.begin(), v.end());\n  std::cout &lt;&lt; fut.get() &lt;&lt; std::endl;\n  t.join();\n\n  return 0;\n}\n</code></pre>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#stdfuturestdasync","title":"std::future/std::async","text":"<p>\u4e0a\u9762\u6240\u8ff0\u7684\u51e0\u79cd\u591a\u7ebf\u7a0b\u7f16\u7a0b\u65b9\u5f0f\u90fd\u9700\u8981 <code>std::thread</code>\u663e\u5f0f\u521b\u5efa\u7ebf\u7a0b\uff0c\u7ebf\u7a0b\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u8fd8\u9700\u8981\u663e\u5f0f\u7684\u5408\u5e76\u6216\u5206\u79bb\uff0c\u663e\u5f97\u5341\u5206\u7e41\u7410\u3002<code>std::future</code>\u548c <code>std::async</code>\u7684\u7ec4\u5408\u5c31\u5c06\u5bf9\u7ebf\u7a0b\u7684\u64cd\u4f5c\u5c01\u88c5\u8d77\u6765\uff0c\u514d\u53bb\u4e86\u663e\u5f0f\u64cd\u4f5c\u7ebf\u7a0b\u7684\u9ebb\u70e6\u3002</p> <pre><code>#include &lt;future&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\n\nint main(int argc, char* argv[]) {\n  auto accumulate = [](auto begin, auto end) {\n    return std::accumulate(begin, end, 0);\n  };\n\n  std::vector&lt;int&gt; v{1, 2, 3, 4, 5, 6};\n  std::future&lt;int&gt; fut =\n      std::async(std::launch::async, accumulate, v.begin(), v.end());\n  std::cout &lt;&lt; fut.get() &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre> <p>\u4e0e\u76f4\u63a5\u4f7f\u7528 <code>std::thread</code>\u4e0d\u540c\uff0c<code>std::async</code>\u5b58\u5728\u6267\u884c\u7b56\u7565\u7684\u6982\u5ff5\uff0c\u5206\u522b\u662f\uff1a<code>std::launch::async</code>\u548c <code>std::launch::deferred</code>\u3002</p> <ol> <li><code>std::launch::async</code>\uff1a\u7acb\u5373\u53d1\u5c04\u5f02\u6b65\u64cd\u4f5c\u3002</li> <li><code>std::launch::deferred</code>\uff1a\u5f02\u6b65\u64cd\u4f5c\u5ef6\u8fdf\u5230 <code>std::future</code>\u7684 <code>get</code>\u6216 <code>wait</code>\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\u53d1\u5c04\uff1b\u5982\u679c\u6ca1\u6709\u8c03\u7528 <code>get</code>\u6216 <code>wait</code>\u65b9\u6cd5\uff0c\u5219\u5f02\u6b65\u64cd\u4f5c\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u53d1\u5c04\u3002</li> <li>\u5728\u4e0d\u6307\u5b9a\u6267\u884c\u7b56\u7565\u65f6\uff0c<code>std::async</code>\u5c06\u4f7f\u7528 <code>std::launch::async | std::launch::deferred</code>\u6267\u884c\u7b56\u7565\uff1b\u5728\u8be5\u7b56\u7565\u4e0b\uff0c<code>std::async</code>\u4f1a\u8d1f\u8f7d\u5747\u8861\u7b49\u64cd\u4f5c\uff0c\u53ef\u80fd\u7acb\u523b\u53d1\u5c04\u5f02\u6b65\u64cd\u4f5c\uff0c\u4e5f\u53ef\u80fd\u5ef6\u8fdf\u53d1\u5c04\uff1b\u5373\uff0c\u53d1\u5c04\u7684\u65f6\u673a\u4ea4\u7531\u7cfb\u7edf\u51b3\u5b9a\u3002</li> </ol>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#stdfuture_status","title":"std::future_status","text":"<p><code>std::future</code>\u548c <code>std::shared_future</code>\u4f7f\u7528 <code>wait_for</code>\u548c <code>wait_until</code>\u65b9\u6cd5\u65f6\uff0c\u4f1a\u8fd4\u56de <code>std::future_status</code>\uff0c\u7528\u4e8e\u8868\u793a <code>std::future</code>\u548c <code>std::shared_future</code>\u7684\u72b6\u6001\u3002\u8fd9\u91cc\uff0c<code>std::future_status</code>\u5171\u6709\u4e09\u79cd\u72b6\u6001\u3002</p> <ol> <li><code>std::future_status::timeout</code>\uff1a\u7b49\u5f85\u8d85\u65f6\u3002</li> <li><code>std::future_status::ready</code>\uff1a\u6570\u636e\u5df2\u5199\u5165\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>get</code>\u65b9\u6cd5\u8bfb\u53d6\u3002</li> <li><code>std::future_status::deferred</code>\uff1a\u6570\u636e\u901a\u9053\u4e2d\u5305\u542b\u5ef6\u8fdf\u542f\u52a8\u884c\u4e3a\uff0c\u5728\u663e\u5f0f\u8bf7\u6c42\u65f6\u624d\u4f1a\u53d1\u5c04\u5f02\u6b65\u64cd\u4f5c\u3002</li> </ol> <p>\u5173\u4e8e <code>deferred</code>\u7684\u7406\u89e3\uff0c\u53ef\u4ee5\u770bcppreference\u7684\u89e3\u91ca\uff1alazy evaluation is performed: the first call to a non-timed wait function on the std::future that async returned to the caller will cause the copy of f to be invoked (as an rvalue) with the copies of args... (also passed as rvalues) in the current thread (which does not have to be the thread that originally called std::async)\u3002</p> <pre><code>#include &lt;chrono&gt;\n#include &lt;future&gt;\n#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nusing namespace std::chrono_literals;\n\nint main() {\n  std::future&lt;int&gt; future = std::async([]() {\n    std::this_thread::sleep_for(3s);\n    return 8;\n  });\n\n  std::cout &lt;&lt; \"waiting...\\n\";\n  std::future_status status;\n  do {\n    status = future.wait_for(1s);\n    switch (status) {\n      case std::future_status::deferred:\n        // If |std::async|'s launch policy is |deferred|, we will get stucked in\n        // an infinite loop here. So call |wait| or |get| here to avoid this\n        // situation.\n        // future.wait();  // &lt;- Uncomment it to get rid of infinite loop.\n        std::cout &lt;&lt; \"deferred\\n\";\n        break;\n      case std::future_status::timeout:\n        std::cout &lt;&lt; \"timeout\\n\";\n        break;\n      case std::future_status::ready:\n        std::cout &lt;&lt; \"ready!\\n\";\n        break;\n    }\n  } while (status != std::future_status::ready);\n\n  std::cout &lt;&lt; \"result is \" &lt;&lt; future.get() &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#\u6570\u636e\u4fdd\u62a4\u4e0e\u548c\u7ebf\u7a0b\u540c\u6b65","title":"\u6570\u636e\u4fdd\u62a4\u4e0e\u548c\u7ebf\u7a0b\u540c\u6b65","text":""},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#\u4e92\u65a5\u9501","title":"\u4e92\u65a5\u9501","text":"<p>\u4e34\u754c\u533a\u662f\u6307\u53ef\u4ee5\u88ab\u591a\u4e2a\u7ebf\u7a0b\u5171\u540c\u8bbf\u95ee\u7684\u903b\u8f91\u7247\u6bb5\u3002\u7531\u4e8e\u591a\u4e2a\u7ebf\u7a0b\u5747\u53ef\u8bbf\u95ee\uff0c\u5728\u4e0d\u52a0\u4efb\u4f55\u9650\u5236\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e34\u754c\u533a\u4e2d\u7684\u53d8\u91cf\u4fee\u6539\u53ef\u80fd\u5e76\u4e0d\u7b26\u5408\u9884\u671f\u3002\u4e92\u65a5\u9501\u5c31\u662f\u4e00\u79cd\u4e34\u754c\u533a\u7684\u8bbf\u95ee\u9650\u5236\uff0c\u4ed6\u80fd\u591f\u4fdd\u8bc1\u540c\u4e00\u65f6\u523b\u8fdb\u5165\u5230\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u3002\u8fd9\u6837\uff0c\u4e0e\u4e34\u754c\u533a\u76f8\u5173\u7684\u64cd\u4f5c\u5c31\u4e0e\u5355\u7ebf\u7a0b\u65e0\u5f02\uff0c\u6700\u7ec8\u7684\u7ed3\u679c\u4e5f\u4f1a\u6b63\u786e\u3002</p> <p>\u5f53\u4e92\u65a5\u9501\u88ab\u6301\u6709\u65f6\uff0c\u5176\u4ed6\u60f3\u8981\u8fdb\u5165\u5230\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\u5c31\u5fc5\u987b\u7b49\u5f85\u9501\u7684\u6301\u6709\u7ebf\u7a0b\u91ca\u653e\u624d\u80fd\u518d\u6b21\u7ade\u4e89\u9501\u7684\u6240\u6709\u6743\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u5c0f\u4f8b\u5b50\uff0c\u5728\u4e0d\u4f7f\u7528\u4e92\u65a5\u9501\u65f6\uff0c\u6700\u7ec8\u7684\u8ba1\u7b97\u7ed3\u679c\u5728\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u4e14\u6bcf\u6b21\u8ba1\u7b97\u7684\u7ed3\u679c\u90fd\u4e0d\u592a\u4e00\u6837\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;mutex&gt;\n#include &lt;thread&gt;\n\nint main(int argc, char* argv[]) {\n  std::mutex mtx;\n  int count = 0;\n  auto foo = [&amp;mtx, &amp;count]() {\n    for (int i = 0; i &lt; 50000; i++) {\n      mtx.lock();\n      count++;\n      mtx.unlock();\n    }\n  };\n\n  std::thread t1(foo);\n  std::thread t2(foo);\n  if (t1.joinable())\n    t1.join();\n  if (t2.joinable())\n    t2.join();\n\n  std::cout &lt;&lt; count &lt;&lt; std::endl;  // count=100000\n\n  return 0;\n}\n</code></pre> <p><code>std::mutex</code>\u662fC++\u63d0\u4f9b\u7684\u6700\u57fa\u7840\u7684\u4e92\u65a5\u9501\u7c7b\u578b\u3002\u9664\u6b64\u4e4b\u5916\uff0cC++\u63d0\u4f9b\u4e86\u4e09\u79cd\u7528\u9014\u4e0d\u540c\u7684\u4e92\u65a5\u9501\uff1a<code>std::recursive_mutex</code>\uff0c<code>std::timed_mutex</code>\uff0c\u548c <code>std::recursive_timed_mutex</code>\u3002</p> <ol> <li><code>std::recursive_mutex</code>\uff1a\u652f\u6301\u9012\u5f52\u52a0\u9501\uff0c\u4f46\u662f\u9700\u8981\u4fdd\u8bc1\u52a0\u9501\u7684\u6df1\u5ea6\u548c\u89e3\u9501\u7684\u6df1\u5ea6\u4e00\u81f4\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u6b7b\u9501\u73b0\u8c61\u3002</li> <li><code>std::timed_mutex</code>\uff1a\u7ebf\u7a0b\u5728\u7b49\u5f85\u65f6\u5c06\u4f1a\u5224\u65ad\u5176\u662f\u5426\u8d85\u65f6\uff0c\u672a\u8d85\u65f6\u5219\u7ebf\u7a0b\u4f1a\u963b\u585e\u7b49\u5f85\u83b7\u53d6\u9501\uff0c\u8d85\u65f6\u5219\u4e0d\u518d\u963b\u585e\u7b49\u5f85\u800c\u662f\u7ee7\u7eed\u6267\u884c\u3002</li> <li><code>std::recursive_timed_mutex</code>\uff1a\u652f\u6301\u9012\u5f52\u52a0\u901f\u7684 <code>std::timed_mutex</code>\u3002</li> </ol>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#\u6b7b\u9501\u548craii","title":"\u6b7b\u9501\u548cRAII","text":"<p>\u6b7b\u9501\u73b0\u8c61\u662f\u6307\u591a\u4e2a\u7ebf\u7a0b\u56e0\u4e3a\u8d44\u6e90\u7ade\u4e89\u800c\u4e92\u76f8\u7b49\u5f85\u7684\u73b0\u8c61\u3002\u4e0b\u9762\u5c31\u662f\u4e00\u4e2a\u6b7b\u9501\u4f8b\u5b50\u3002</p> <pre><code>#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;mutex&gt;\n#include &lt;thread&gt;\n\nint main(int argc, char* argv[]) {\n  std::mutex mtx;\n  int count = 4;\n\n  auto foo = [&amp;mtx, &amp;count]() {\n    std::function&lt;void(int)&gt; f;\n    f = [&amp;mtx, &amp;f](int count) {\n      if (count == 0) {\n        return;\n      }\n      mtx.lock();\n      count--;\n      // Recursive call, thread is blocked by himself.\n      // It's quite easy to fix it.\n      f(count);\n      mtx.unlock();\n    };\n    f(count);\n  };\n\n  std::thread(foo).join();\n\n  return 0;\n}\n</code></pre> <p>\u968f\u7740\u4ee3\u7801\u903b\u8f91\u8d8b\u4e8e\u590d\u6742\uff0c\u51fd\u6570\u7684\u51fa\u53e3\u9010\u6e10\u53d8\u591a\uff0c\u5341\u5206\u5bb9\u6613\u6f0f\u5199 <code>unlock</code>\uff0c\u8fdb\u800c\u5bfc\u81f4\u6b7b\u9501\u95ee\u9898\u3002\u9488\u5bf9\u8fd9\u4e00\u95ee\u9898\uff0cC++\u63d0\u4f9b\u4e86\u4e00\u4e9bRAII\u7c7b\uff0c\u5229\u7528\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u6765\u7ba1\u7406\u4e92\u65a5\u9501\uff0c\u907f\u514d\u51fa\u73b0\u9501\u5fd8\u8bb0\u91ca\u653e\u7684\u60c5\u51b5\u3002</p> <p><code>std::lock_guard</code>\u76f8\u5bf9\u7b80\u5355\uff0c\u4e14\u5f00\u9500\u8f83\u5c0f\uff1b<code>std::unique_lock</code>\u5185\u90e8\u53ef\u4ee5\u7ef4\u62a4\u9501\u7684\u72b6\u6001\uff0c\u4f7f\u7528\u66f4\u52a0\u7075\u6d3b\uff0c\u4e5f\u5e26\u6765\u4e86\u989d\u5916\u7684\u5f00\u9500\uff0c\u5e38\u5e38\u4e0e <code>std::condition_variable</code>\u914d\u5408\u4f7f\u7528\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include &lt;mutex&gt;\n#include &lt;thread&gt;\n\nint main(int argc, char* argv[]) {\n  int count = 0;\n  std::mutex mtx;\n  auto foo = [&amp;mtx, &amp;count]() {\n    for (int i = 0; i &lt; 50000; i++) {\n      // std::lock_guard&lt;std::mutex&gt; lock(mtx);\n      std::unique_lock&lt;std::mutex&gt; lock{mtx, std::defer_lock};\n      lock.lock();\n      count++;\n    }\n  };\n\n  std::thread t1(foo);\n  std::thread t2(foo);\n  if (t1.joinable())\n    t1.join();\n  if (t2.joinable())\n    t2.join();\n\n  std::cout &lt;&lt; count &lt;&lt; std::endl;  // count=100000\n\n  return 0;\n}\n</code></pre>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#\u6761\u4ef6\u53d8\u91cf","title":"\u6761\u4ef6\u53d8\u91cf","text":"<p>\u6761\u4ef6\u53d8\u91cf\u662f\u4e00\u79cd\u5e95\u5c42\u7684\u540c\u6b65\u539f\u8bed\uff0c\u53ef\u4ee5\u7528\u4e8e\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u7684\u540c\u6b65\u64cd\u4f5c\u3002\u6761\u4ef6\u53d8\u91cf\u7684\u57fa\u539f\u7406\u662f\uff1a\u82e5\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0c\u5219\u8ba9\u51fa\u5904\u7406\u5668\uff0c\u8fdb\u5165\u963b\u585e\u72b6\u6001\uff1b\u5982\u6761\u4ef6\u6ee1\u8db3\uff0c\u5219\u4f1a\u88ab\u5524\u9192\u7ee7\u7eed\u5904\u7406\u3002\u6761\u4ef6\u53d8\u91cf\u5f80\u5f80\u9700\u8981\u548c\u4e92\u65a5\u9501\u4e00\u540c\u4f7f\u7528\u8fbe\u5230\u963b\u585e\u7b49\u5f85\u7684\u6548\u679c\u3002</p> <pre><code>#include &lt;condition_variable&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;mutex&gt;\n#include &lt;thread&gt;\n\nint main(int argc, char* argv[]) {\n  std::mutex mtx;\n  std::condition_variable cv;\n\n  bool ready = false;\n  bool weakened = false;\n\n  auto foo = [&amp;]() {\n    std::unique_lock&lt;std::mutex&gt; lock(mtx);\n    cv.wait(lock, [&amp;ready]() { return ready; });\n    std::cout &lt;&lt; \"foo cv is ready.\" &lt;&lt; std::endl;\n    weakened = true;\n    lock.unlock();\n    cv.notify_one();\n  };\n\n  std::thread t(foo);\n  {\n    std::lock_guard&lt;std::mutex&gt; lock(mtx);\n    ready = true;\n  }\n  cv.notify_one();\n\n  {\n    std::unique_lock&lt;std::mutex&gt; lock(mtx);\n    cv.wait(lock, [&amp;weakened]() { return weakened; });\n    std::cout &lt;&lt; \"foo cv is weakened.\" &lt;&lt; std::endl;\n  }\n\n  if (t.joinable())\n    t.join();\n\n  return 0;\n}\n</code></pre> <p>\u5728\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u65f6\uff0c<code>wait</code>\u63a5\u53d7\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f <code>std::unique_lock</code>\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u4e14\u8fd4\u56de\u4e00\u4e2a <code>bool</code>\u503c\uff08\u76f8\u5f53\u4e8e <code>while(!__p()) ...</code>\uff09\u3002</p>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#thread_local","title":"thread_local","text":"<p>\u5728C++\u4e2d\uff0c<code>thread_local</code>\u5173\u952e\u5b57\u7528\u4e8e\u58f0\u660e\u7ebf\u7a0b\u72ec\u6709\u7684\u53d8\u91cf\u3002<code>thread_local</code>\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u4e0e\u7ebf\u7a0b\u7684\u751f\u547d\u5468\u671f\u4e00\u81f4\u3002\u6240\u4ee5\uff0c\u53ef\u4ee5\u8ba4\u4e3a <code>thread_local</code>\u53d8\u91cf\u662f\u4f5c\u7528\u8303\u56f4\u5728\u7ebf\u7a0b\u5185\u90e8\u7684 <code>static</code>\u53d8\u91cf\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nthread_local int v = 0;\n\nint main(int argc, char* argv[]) {\n  auto func = [](const std::string&amp; tname) {\n    std::cout &lt;&lt; \"thread_name = [\" &lt;&lt; tname &lt;&lt; \"]; v = [\" &lt;&lt; (long)(&amp;v)\n              &lt;&lt; \"]\" &lt;&lt; std::endl;\n  };\n\n  std::thread t1(func, \"t1\");\n  std::thread t2(func, \"t2\");\n  if (t1.joinable())\n    t1.join();\n  if (t2.joinable())\n    t2.join();\n\n  return 0;\n}\n</code></pre>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#\u7b2c\u4e09\u65b9\u5e93","title":"\u7b2c\u4e09\u65b9\u5e93","text":"<p>\u5728\u5b9e\u9645\u7684\u5f00\u53d1\u5de5\u4f5c\u4e2d\uff0c\u76f4\u63a5\u4f7f\u7528C++\u7684\u591a\u7ebf\u7a0b\u7f16\u7a0b\u63a5\u53e3\u7684\u573a\u666f\u662f\u6781\u5c11\u7684\uff0c\u66f4\u591a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u9009\u62e9\u4f7f\u7528\u9879\u76ee\u4e2d\u5df2\u7ecf\u96c6\u6210\u7684\u7ebf\u7a0b\u5e93\u3002\u4e0b\u7b80\u5355\u4ecb\u7ecd\u51e0\u4e2a\u6211\u76ee\u524d\u77e5\u9053\u7684\u591a\u7ebf\u7a0b\u5e93\u3002</p>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#chromium-base","title":"Chromium Base","text":"<p>base\u5e93\u662fchromium\u4e2d\u4e00\u4e2a\u76f8\u5bf9\u72ec\u7acb\u7684\u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u8bb8\u591a\u5de5\u5177\u7c7b\uff0c\u5176\u4e2d\u5c31\u5305\u62ec\u4e86\u591a\u7ebf\u7a0b\u5e93\u3002</p> <pre><code>#include \"base/at_exit.h\"\n#include \"base/command_line.h\"\n#include \"base/logging.h\"\n#include \"base/run_loop.h\"\n#include \"base/task/single_thread_task_executor.h\"\n#include \"base/task/thread_pool.h\"\n#include \"base/task/thread_pool/thread_pool_instance.h\"\n#include \"base/time/time.h\"\n\nint main(int argc, char* argv[]) {\n  base::AtExitManager at_exit;\n  base::CommandLine::Init(argc, argv);\n  logging::SetLogItems(true, true, true, false);\n\n  base::SingleThreadTaskExecutor main_thread_task_executor;\n  base::ThreadPoolInstance::CreateAndStartWithDefaultParams(\"demo\");\n\n  // Logging in 4 seconds.\n  base::ThreadPool::PostDelayedTask(\n      FROM_HERE, base::BindOnce([]() { LOG(INFO) &lt;&lt; \"Task Logging.\"; }),\n      base::Seconds(4));\n  LOG(INFO) &lt;&lt; \"Hello, World.\";\n  base::RunLoop().Run();\n\n  return 0;\n}\n</code></pre>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#qt-concurrent","title":"Qt Concurrent","text":"<p>QtConcurrent\u662fQt\u63d0\u4f9b\u7684\u5e76\u53d1\u63a5\u53e3\u3002\u9664\u4e86 <code>run</code>\u65b9\u6cd5\uff0c\u8fd8\u63d0\u4f9b\u4e86 <code>map</code>\uff0c<code>filter</code>\u7b49\u6bd4\u8f83\u9ad8\u7ea7\u7684\u5e76\u53d1\u8bed\u4e49\u3002</p> <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n\n#include &lt;QFuture&gt;\n#include &lt;QThreadPool&gt;\n#include &lt;QVector&gt;\n#include &lt;QtConcurrent&gt;\n#include &lt;QtGlobal&gt;\n\nint main(int argc, char* argv[]) {\n  QVector&lt;qint32&gt; v = {1, 2, 3, 4, 5, 6};\n  QFuture&lt;qint32&gt; sum = QtConcurrent::run(\n      QThreadPool::globalInstance(),\n      [](auto&amp; begin, auto&amp; end) { return std::accumulate(begin, end, 0); },\n      v.begin(), v.end());\n\n  qDebug() &lt;&lt; sum;\n\n  return 0;\n}\n</code></pre>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#taskflow","title":"taskflow","text":"<p>taskflow\u4e5f\u662f\u4e00\u4e2a\u6bd4\u8f83\u51fa\u540d\u7684\u591a\u7ebf\u7a0b\u5e93\uff0c\u4e14\u652f\u6301\u591a\u79cd\u786c\u4ef6\u8bbe\u5907\u7684\u52a0\u901f\u3002\u4e0e\u666e\u901a\u7684\u7ebf\u7a0b\u5e93\u4e0d\u540c\uff0ctaskflow\u652f\u6301\u4e3a\u4efb\u52a1\u4e4b\u95f4\u6dfb\u52a0\u4f9d\u8d56\u5173\u7cfb\u3002\u5728\u5efa\u7acb\u4e86\u4efb\u52a1\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u540e\uff0c\u4e8b\u4ef6\u4e4b\u95f4\u7684\u540c\u6b65\u884c\u4e3a\u5c31\u5c06\u88ab\u786e\u5b9a\uff0ctaskflow\u5c06\u636e\u6b64\u6700\u5927\u5316\u5229\u7528\u786c\u4ef6\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;taskflow/core/executor.hpp&gt;\n#include &lt;taskflow/core/taskflow.hpp&gt;\n#include &lt;taskflow/taskflow.hpp&gt;\n\nint main(int argc, char* argv[]) {\n  tf::Executor executor;\n  tf::Taskflow taskflow;\n  auto [A, B, C, D] = taskflow.emplace(\n    []() { std::cout &lt;&lt; \"task A\" &lt;&lt; std::endl; },\n    []() { std::cout &lt;&lt; \"task B\" &lt;&lt; std::endl; },\n    []() { std::cout &lt;&lt; \"task C\" &lt;&lt; std::endl; },\n    []() { std::cout &lt;&lt; \"task D\" &lt;&lt; std::endl; }\n  );\n\n  A.precede(B, C);\n  D.succeed(B, C);\n  B.precede(C);\n\n  executor.run(taskflow).wait();\n\n  return 0;\n}\n</code></pre>"},{"location":"basic-usage-of-multithread-programming-in-cplusplus/#\u5c0f\u5c0f\u7684\u603b\u7ed3","title":"\u5c0f\u5c0f\u7684\u603b\u7ed3","text":"<p>\u591a\u7ebf\u7a0b\u7f16\u7a0b\u4e2d\u53ef\u8bf4\u7684\u5185\u5bb9\u5f88\u591a\uff0c\u672c\u7bc7\u4e5f\u53ea\u662f\u63cf\u8ff0\u4e86\u4e00\u4e9b\u5176\u4e2d\u7684\u76ae\u6bdb\u3002\u5728\u4f7f\u7528\u4e86\u5c01\u88c5\u597d\u7684\u7ebf\u7a0b\u5e93\u4e4b\u540e\uff0c\u5f00\u53d1\u8005\u5c06\u80fd\u591f\u628a\u66f4\u591a\u7684\u6ce8\u610f\u529b\u96c6\u4e2d\u4e8e\u4e1a\u52a1\u903b\u8f91\u4e2d\uff0c\u4f46\u4e5f\u4f1a\u9047\u5230\u751f\u547d\u5468\u671f\uff0c\u65f6\u5e8f\u7b49\u95ee\u9898\u3002\u603b\u7684\u6765\u8bf4\uff0c\u591a\u7ebf\u7a0b\u5e26\u6765\u7684\u5f02\u6b65\u884c\u4e3a\u63d0\u9ad8\u4e86\u786c\u4ef6\u7684\u5229\u7528\u7387\u3002\u6b64\u5916\uff0c\u968f\u7740C++\u6807\u51c6\u7684\u4e0d\u65ad\u66f4\u65b0\uff0c\u8bf8\u5982\u534f\u7a0b\u3001executor\u3001\u4fe1\u53f7\u91cf\u7b49\u5de5\u5177\u88ab\u52a0\u5165\u5230\u6807\u51c6\u5e93\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u7684\u5de5\u5177\u53d8\u591a\u4e86\uff0c\u8111\u9614\u4e5f\u4f1a\u66f4\u75bc\u4e86\u3002</p> <ol> <li> <p>What is the purpose of std::function and how to use it? \u21a9</p> </li> <li> <p>std::function \u21a9</p> </li> <li> <p>C++11\u65b0\u7279\u6027\u4e4bstd::function \u21a9</p> </li> <li> <p>Concurrency support library \u21a9</p> </li> <li> <p>C++ \u57f7\u884c\u7dd2\uff1apromise\u3001future\u3001packaged_task \u8207 async \u7684\u4f7f\u7528\u65b9\u6cd5 \u21a9</p> </li> <li> <p>C++11 \u591a\u7ebf\u7a0b future/promise\u7b80\u4ecb \u21a9</p> </li> <li> <p>\u901a\u4fd7\u8bb2\u89e3c++ future/shared_future \u21a9</p> </li> <li> <p>c++ \u5982\u679c\u5f02\u6b65\u6267\u884c\u662f\u5fc5\u9700\u7684\uff0c\u6307\u5b9astd::launch::async\u7b56\u7565 \u21a9</p> </li> <li> <p>c++\u591a\u7ebf\u7a0b\uff08\u5341\u4e5d\uff09 - std::timed_mutex \u21a9</p> </li> <li> <p>C++11 std::unique_lock\u4e0estd::lock_guard\u533a\u522b\u53ca\u591a\u7ebf\u7a0b\u5e94\u7528\u5b9e\u4f8b \u21a9</p> </li> <li> <p>C++11\u591a\u7ebf\u7a0b\u7f16\u7a0b(\u4e09)\u2014\u2014lock_guard\u548cunique_lock \u21a9</p> </li> <li> <p>std::unique_lock\u4e0estd::lock_guard \u21a9</p> </li> <li> <p>std::unique_lock \u21a9</p> </li> <li> <p>std::lock_guard\u548cstd::unique_lock\u7684\u5dee\u522b \u21a9</p> </li> <li> <p>C++ 11 \u5173\u952e\u5b57\uff1athread_local \u21a9</p> </li> <li> <p>Storage class specifiers \u21a9</p> </li> <li> <p>All about thread-local storage \u21a9</p> </li> <li> <p>chromium/src/base - Git at Google \u21a9</p> </li> <li> <p>QtConcurrent::run() \u21a9</p> </li> <li> <p>taskflow/taskflow - A General-purpose Parallel and Heterogeneous Task Programming System \u21a9</p> </li> </ol>"},{"location":"camera-calibration-using-opencv/","title":"\u7ffb\u8bd1\uff1aOpenCV\u76f8\u673a\u6807\u5b9a<sup>1</sup>","text":"\u58f0\u660e <p>\u539f\u6587\u6765\u81eaOpenCV\u5b98\u65b9\u6587\u6863<sup>1</sup>\uff0c\u672c\u4eba\u5728\u7ffb\u8bd1\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4e86\u7b80\u5355\u52a0\u5de5\u548c\u4fe1\u606f\u8865\u5145\u3002\u5982\u679c\u60a8\u8ba4\u4e3a\u4fb5\u72af\u4e86\u60a8\u7684\u5408\u6cd5\u6743\u76ca\uff0c\u8bf7\u4e0e\u6211\u8054\u7cfb\uff0c\u6211\u5c06\u5220\u9664\u672c\u6587\u3002</p>"},{"location":"camera-calibration-using-opencv/#\u672c\u6587\u76ee\u6807","title":"\u672c\u6587\u76ee\u6807","text":"<p>\u901a\u8fc7\u672c\u6587\uff0c\u6211\u4eec\u5c06\u4f1a\u5b66\u4e60\u4e0e\u5982\u4f55\u4f7f\u7528OpenCV\u8fdb\u884c\u76f8\u673a\u6807\u5b9a\u76f8\u5173\u7684\u77e5\u8bc6\u3002\u5177\u4f53\u7684\uff1a</p> <ol> <li>\u7531\u76f8\u673a\u5bfc\u81f4\u7684\u56fe\u50cf\u7578\u53d8\u6709\u54ea\u4e9b\u7c7b\u578b\uff1b</li> <li>\u5982\u4f55\u901a\u8fc7\u8ba1\u7b97\u5f97\u5230\u76f8\u673a\u7684\u5185\u53c2\u77e9\u9635\u548c\u5916\u53c2\u77e9\u9635\uff1b</li> <li>\u5982\u4f55\u5229\u7528\u76f8\u673a\u7684\u5185\u53c2\u77e9\u9635\u548c\u5916\u53c2\u77e9\u9635\u5bf9\u56fe\u50cf\u8fdb\u884c\u6d88\u7578\u53d8\u3002</li> </ol>"},{"location":"camera-calibration-using-opencv/#\u57fa\u7840\u77e5\u8bc6","title":"\u57fa\u7840\u77e5\u8bc6","text":"<p>\u57fa\u4e8e\u5c0f\u5b54\u6210\u50cf\u6a21\u578b\u7684\u76f8\u673a\u4f1a\u4e3a\u6240\u62cd\u6444\u7684\u56fe\u50cf\u5f15\u5165\u56fe\u50cf\u7578\u53d8\u95ee\u9898\u3002\u5176\u4e2d\uff0c\u6700\u4e3b\u8981\u7684\u7578\u53d8\u7c7b\u578b\u662f\uff1a\u5f84\u5411\u7578\u53d8\uff08radial distortion\uff09\u548c\u5207\u5411\u7578\u53d8\uff08tangential distortion\uff09\u3002</p> <p>\u5f84\u5411\u7578\u53d8\u4f1a\u5bfc\u81f4\u771f\u5b9e\u573a\u666f\u4e2d\u7684\u76f4\u7ebf\u53d8\u4e3a\u56fe\u50cf\u4e2d\u7684\u66f2\u7ebf\u3002\u8be5\u73b0\u8c61\u5177\u6709\u8d8a\u8fdc\u79bb\u56fe\u50cf\u4e2d\u5fc3\u8d8a\u660e\u663e\u7684\u7279\u70b9\u3002\u5728\u56fe1\u4e2d\uff0c\u68cb\u76d8\u683c\u4e24\u4fa7\u4f7f\u7528\u4e86\u4e24\u6761\u7ea2\u8272\u53c2\u8003\u7ebf\u4f5c\u4e3a\u5bf9\u6bd4\uff0c\u53ef\u4ee5\u53d1\u73b0\uff1a\u68cb\u76d8\u683c\u7684\u8fb9\u7f18\u4e0d\u518d\u662f\u4e00\u6761\u76f4\u7ebf\uff1b\u4e0e\u7ea2\u8272\u53c2\u8003\u7ebf\u76f8\u6bd4\uff0c\u5f2f\u66f2\u7684\u7ebf\u6761\u5411\u56fe\u50cf\u8fb9\u7f18\u81a8\u80c0\uff1b\u4e14\u8d8a\u9760\u8fd1\u56fe\u50cf\u8fb9\u7f18\uff0c\u7ebf\u6761\u5411\u5916\u81a8\u80c0\u7684\u73b0\u8c61\u8d8a\u660e\u663e\u3002\u5982\u679c\u60f3\u8981\u4e86\u89e3\u66f4\u591a\u6709\u5173\u56fe\u50cf\u7578\u53d8\u7684\u77e5\u8bc6\uff0c\u53ef\u4ee5\u53c2\u8003\u7ef4\u57fa\u767e\u79d1\u4e2d\u7684\u5149\u5b66\u7578\u53d8<sup>2</sup>\u4e00\u8282\u3002</p> <p> </p>      \u56fe1 \u5f84\u5411\u7578\u53d8\u73b0\u8c61\u5c55\u793a    <p>\u5177\u4f53\u7684\uff0c\u5f84\u5411\u7578\u53d8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u516c\u5f0f\u8868\u793a\uff1a</p> \\[ \\begin{align*} x_{distorted} &amp;= x(1 + k_{1} r^2 + k_{2} r^4 + k_{3} r^6) \\\\ y_{distorted} &amp;= y(1 + k_{1} r^2 + k_{2} r^4 + k_{3} r^6). \\end{align*} \\] <p>\u4e0e\u5f84\u5411\u7578\u53d8\u7c7b\u4f3c\uff0c\u5207\u5411\u7578\u53d8\u5219\u662f\u7531\u76f8\u673a\u955c\u5934\u6240\u5728\u5e73\u9762\u548c\u50cf\u5e73\u9762\u975e\u4e25\u683c\u5e73\u884c\u5f15\u8d77\u7684\u3002\u56e0\u6b64\uff0c\u56fe\u50cf\u4e2d\u7684\u90e8\u5206\u533a\u57df\u4f1a\u5b58\u5728\u770b\u4e0a\u53bb\u6bd4\u7406\u8bba\u4e0a\u66f4\u9760\u8fd1\u7684\u73b0\u8c61\u3002\u5207\u5411\u7578\u53d8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u516c\u5f0f\u8868\u793a\uff1a</p> \\[ \\begin{align*} x_{distorted} &amp;= x + [2p_{1}xy + p_{2}(r^2+2x^2)] \\\\ y_{distorted} &amp;= y + [p_{1}(r^2+2y^2) + 2p_{2}xy]. \\end{align*} \\] <p>\u6839\u636e\u5f84\u5411\u7578\u53d8\u548c\u5207\u5411\u7578\u53d8\u7684\u8868\u793a\u516c\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e94\u4e2a\u53c2\u6570\u8868\u793a\u56fe\u50cf\u7684\u7578\u53d8\u3002\u8fd9\u4e94\u4e2a\u53c2\u6570\u4e5f\u88ab\u79f0\u4e3a\u7578\u53d8\u53c2\u6570\uff08distortion coefficients\uff09\uff1a</p> \\[ \\begin{align*} C_{distortion} = (k_1 \\enspace k_2 \\enspace p_1 \\enspace p_2 \\enspace k_3). \\end{align*} \\] <p>\u9664\u7578\u53d8\u53c2\u6570\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\u6765\u5b8c\u6210\u7578\u53d8\u77eb\u6b63\u7684\u6d41\u7a0b\uff0c\u5982\u76f8\u673a\u7684\u5185\u90e8\u53c2\u6570\u548c\u5916\u90e8\u53c2\u6570\u3002</p> <p>\u6bcf\u4e2a\u76f8\u673a\u7684\u5185\u90e8\u53c2\u6570\u5747\u4e0d\u76f8\u540c\uff0c\u4ed6\u53d6\u51b3\u4e8e\u76f8\u673a\u7684\u5149\u5b66\u7279\u6027\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u76f8\u673a\u7684\u5185\u90e8\u53c2\u6570\u7531\u76f8\u673a\u7684\u7126\u8ddd\\((f_x, fy)\\)\u548c\u5149\u5fc3\u4f4d\u7f6e\\((c_x, cy)\\)\u7ec4\u6210\u3002\u7531\u4e8e\u6bcf\u4e2a\u76f8\u673a\u7684\u5185\u90e8\u53c2\u6570\u90fd\u662f\u72ec\u6709\u7684\uff0c\u56e0\u6b64\u4e00\u65e6\u786e\u5b9a\uff0c\u5c31\u53ef\u4ee5\u88ab\u6240\u6709\u8be5\u76f8\u673a\u62cd\u6444\u7684\u56fe\u50cf\u590d\u7528\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u76f8\u673a\u7684\u5185\u90e8\u53c2\u6570\u4f1a\u4f7f\u7528\u4e00\u4e2a\u5927\u5c0f\u4e3a\\(3\\times 3\\)\u7684\u77e9\u9635\u8868\u793a\uff1a</p> \\[ \\begin{align*} \\boldsymbol{M}_{camera} =  \\begin{bmatrix}  f_x &amp; 0 &amp; c_x \\\\ 0 &amp; f_y &amp; c_y \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix}. \\end{align*} \\] <p>\u5bf9\u4e8e\u5916\u90e8\u53c2\u6570\uff0c\u4ed6\u901a\u5e38\u662f\u7531\u4e00\u4e9b\u65cb\u8f6c\u548c\u5e73\u79fb\u7684\u5411\u91cf\u7ec4\u6210\uff0c\u7528\u4e8e\u8868\u793a\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7269\u4f53\u4f4d\u7f6e\u5230\u76f8\u673a\u5750\u6807\u4f4d\u7f6e\u7684\u8f6c\u6362\u3002\u7531\u4e8e\u6bcf\u5f20\u56fe\u50cf\u4e2d\u62cd\u6444\u7684\u573a\u666f\u90fd\u53ef\u80fd\u5b58\u5728\u4e0d\u540c\uff0c\u5916\u90e8\u53c2\u6570\u5f80\u5f80\u56e0\u62cd\u6444\u7684\u56fe\u50cf\u800c\u5f02\u3002</p> \u8bd1\u8005\u6ce8\uff1a\u5750\u6807\u8f6c\u6362\u548c\u5750\u6807\u7a7a\u95f4 <p>\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u56fe\u5f62\u5b66\u6e32\u67d3\u7ba1\u7ebf\u4e2d\u7684\u9876\u70b9\u5904\u7406\u9636\u6bb5\u8fdb\u884c\u7406\u89e3\u3002\u5728\u53d8\u6362\u8fc7\u7a0b\u4e2d\u4e3b\u8981\u6d89\u53ca\u4e94\u79cd\u5750\u6807\u7a7a\u95f4\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u5c06\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u7269\u4f53\u6295\u5f71\u5230\u76f8\u673a\u5e73\u9762\u4e2d\u3002\u76f8\u5173\u4fe1\u606f\u53ef\u4ee5\u67e5\u9605LearnOpenGL<sup>3</sup>\u3002</p> <p>\u5bf9\u4e8e\u7acb\u4f53\u89c6\u89c9\u5e94\u7528\uff0c\u56fe\u50cf\u7578\u53d8\u662f\u9996\u5148\u9700\u8981\u88ab\u6d88\u9664\u548c\u77eb\u6b63\u7684\uff0c\u5426\u5219\u4f1a\u5f15\u8d77\u540e\u7eed\u5904\u7406\u6d41\u7a0b\u7684\u8bef\u5dee\u7d2f\u8ba1\u6216\u4ea7\u751f\u9519\u8bef\u7ed3\u679c\u3002\u4e3a\u4e86\u5f97\u5230\u7528\u4e8e\u6d88\u9664\u56fe\u50cf\u7578\u53d8\u7684\u53c2\u6570\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u76f8\u673a\u62cd\u6444\u4e00\u4e9b\u7cbe\u5fc3\u8bbe\u8ba1\u573a\u666f\u3002\u5176\u4e2d\uff0c\u6700\u4e3a\u5e38\u89c1\u7684\u573a\u666f\u662f\u68cb\u76d8\u683c\u56fe\u50cf\u3002\u5728\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u80fd\u591f\u9884\u5148\u77e5\u9053\u771f\u5b9e\u4e16\u754c\u4e2d\u7684\u5173\u952e\u70b9\u5750\u6807\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u56fe\u50cf\u5904\u7406\u7684\u65b9\u5f0f\u5f97\u5230\u5173\u952e\u70b9\u5728\u56fe\u50cf\u4e2d\u7684\u76f8\u5e94\u5750\u6807\u4fe1\u606f\u3002\u901a\u8fc7\u591a\u4e2a\u8fd9\u6837\u7684\u4fe1\u606f\u5bf9\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230\u7528\u4e8e\u6d88\u7578\u53d8\u7684\u7578\u53d8\u53c2\u6570\u3001\u76f8\u673a\u5185\u5916\u53c2\u6570\u7b49\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4e3a\u4e86\u5f97\u5230\u66f4\u597d\u7684\u7ed3\u679c\uff0c\u5f80\u5f80\u9700\u8981\u5bf9\u76f8\u540c\u7684\u573a\u666f\u62cd\u6444\u81f3\u5c1110\u5f20\u4e0d\u540c\u89d2\u5ea6\u7684\u6d4b\u8bd5\u56fe\u50cf\u3002</p>"},{"location":"camera-calibration-using-opencv/#\u4ee3\u7801\u8be6\u89e3","title":"\u4ee3\u7801\u8be6\u89e3","text":"<p>\u5982\u7b2c\u4e8c\u8282\u6700\u540e\u6240\u8ff0\uff0c\u6211\u4eec\u9700\u8981\u81f3\u5c1110\u5f20\u6d4b\u8bd5\u56fe\u50cf\u7528\u4e8e\u76f8\u673a\u6807\u5b9a\u3002OpenCV\u7684\u4ed3\u5e93\u4e2d\u63d0\u4f9b\u4e86\u4e00\u7ec4\u68cb\u76d8\u683c\u56fe\u50cf\u7528\u4e8e\u5c55\u793a\u76f8\u673a\u6807\u5b9a\u7684\u8fc7\u7a0b\uff0c\u4ed6\u4eec\u4f4d\u4e8e\u4ed3\u5e93\u7684<code>samples/data</code>\u76ee\u5f55\u4e0b\uff0c\u540d\u79f0\u4e3a<code>left*.jpg</code>\u3002\u8003\u8651\u5176\u4e2d\u4efb\u610f\u4e00\u5f20\u68cb\u76d8\u683c\u56fe\u50cf\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u7684\u5173\u952e\u4fe1\u606f\u662f\u4e00\u7ec4\u4e09\u7ef4\u4e16\u754c\u4e2d\u70b9\u7684\u5750\u6807\u548c\u4e0e\u4e4b\u5bf9\u5e94\u7684\u4e8c\u7ef4\u56fe\u50cf\u4e2d\u7684\u5750\u6807\u3002\u5176\u4e2d\uff0c\u4e8c\u7ef4\u56fe\u50cf\u4e2d\u70b9\u7684\u5750\u6807\u5341\u5206\u5bb9\u6613\u83b7\u7684\uff0c\u4ed6\u4eec\u5c31\u662f\u68cb\u76d8\u683c\u56fe\u50cf\u4e2d\u4efb\u610f\u4e24\u4e2a\u767d\u8272\u6216\u9ed1\u8272\u65b9\u5757\u7684\u63a5\u89e6\u70b9\u3002</p> <p>\u5bf9\u4e8e\u4e09\u7ef4\u4e16\u754c\u4e2d\u70b9\u7684\u5750\u6807\uff0c\u7531\u4e8e\u6bcf\u6b21\u62cd\u6444\u65f6\u76f8\u673a\u548c\u68cb\u76d8\u683c\u56fe\u50cf\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u540c\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4ed6\u4eec\u7684\\((x, y, z)\\)\u5750\u6807\u3002\u4f46\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u62cd\u6444\u65f6\u68cb\u76d8\u683c\u59cb\u7ec8\u4f4d\u4e8e\\(XY\\)\u5750\u6807\u5e73\u9762\u5185\uff0c\u5373\u6240\u6709\u4e09\u7ef4\u4e16\u754c\u4e2d\u70b9\u7684\\(z\\)\u5750\u6807\u5747\u4e3a0\u3002\u6b64\u65f6\uff0c\u5b9e\u9645\u60c5\u51b5\u4e0b\\(z\\)\u5750\u6807\u7684\u53d8\u5316\u8ba4\u4e3a\u662f\u7531\u76f8\u673a\u6cbf\u5149\u8f74\u65b9\u5411\u524d\u540e\u79fb\u52a8\u5f15\u8d77\u7684\u3002\u901a\u8fc7\u6a21\u578b\u7684\u7b80\u5316\uff0c\u6211\u4eec\u5728\u76f8\u673a\u6807\u5b9a\u65f6\u4ec5\u9700\u77e5\u9053\u4e09\u7ef4\u4e16\u754c\u4e2d\u70b9\u7684\\((x,y)\\)\u5750\u6807\u5373\u53ef\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u7b80\u5316\u8fd9\u4e9b\u5750\u6807\uff1a\u7531\u4e8e\u68cb\u76d8\u683c\u5927\u5c0f\u662f\u5df2\u77e5\u4e14\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e00\u7ec4\u4e8c\u7ef4\u7d22\u5f15\u8868\u793a\u4e16\u754c\u4e2d\u70b9\u7684\u5750\u6807\uff0c\u5982\\((0, 0)\\)\uff0c\\((0, 1)\\)\uff0c\\((0, 2)\\)\u2026\u2026 \u901a\u8fc7\u7d22\u5f15\u503c\u8ba1\u7b97\u5f97\u5230\u7684\u7ed3\u679c\u662f\u771f\u5b9e\u7ed3\u679c\u7684\u7f29\u653e\u503c\u3002\u82e5\u6b64\u65f6\u53ef\u4ee5\u77e5\u9053\u68cb\u76d8\u683c\u65b9\u5757\u5b9e\u9645\u5927\u5c0f\uff0c\u5c31\u80fd\u591f\u5f97\u5230\u4e09\u7ef4\u4e16\u754c\u4e2d\u70b9\u7684\u771f\u5b9e\u5750\u6807\u3002\u5bf9\u4e8e\u672c\u6587\u7684\u793a\u4f8b\u573a\u666f\uff0c\u7531\u4e8e\u6211\u4eec\u5e76\u672a\u5b9e\u9645\u62cd\u6444\u56fe\u50cf\uff0c\u5e76\u4e0d\u77e5\u6653\u68cb\u76d8\u683c\u65b9\u5757\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u7565\u8fc7\u4e86\u68cb\u76d8\u683c\u56fe\u50cf\u5757\u5927\u5c0f\u7684\u53c2\u6570\uff08\u8be5\u53c2\u6570\u7684\u5355\u4f4d\u4e00\u822c\u662f\\(mm\\)\uff09\u3002</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u4e09\u7ef4\u4e16\u754c\u4e2d\u70b9\u7684\u5750\u6807\u88ab\u79f0\u4e3a\u7269\u70b9\uff0c\u4e8c\u7ef4\u56fe\u50cf\u4e2d\u70b9\u7684\u5750\u6807\u88ab\u79f0\u4e3a\u50cf\u70b9\u3002</p>"},{"location":"camera-calibration-using-opencv/#\u51c6\u5907\u9636\u6bb5","title":"\u51c6\u5907\u9636\u6bb5","text":"<p>\u4e3a\u4e86\u80fd\u591f\u641c\u7d22\u5230\u68cb\u76d8\u683c\u56fe\u50cf\u4e2d\u7684\u50cf\u70b9\uff0c\u6211\u4eec\u4f7f\u7528<code>cv2.findChessboardCorners()</code>\u51fd\u6570\u8fdb\u884c\u5904\u7406\u3002\u8be5\u51fd\u6570\u9700\u8981\u6211\u4eec\u6307\u5b9a\u68cb\u76d8\u683c\u56fe\u50cf\u7684\u50cf\u70b9\u6392\u5217\u60c5\u51b5\uff0c\u5982\\(8\\times 8\\)\u6216\\(5 \\times 5\\)\u5927\u5c0f\u7684\u68cb\u76d8\u683c\u3002\u5728\u672c\u6587\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f\\(7\\times 6\\)\u6392\u5217\u60c5\u51b5\u7684\u68cb\u76d8\u683c\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\\(8\\times 8\\)\u6392\u5217\u60c5\u51b5\u7684\u68cb\u76d8\u683c\u80fd\u591f\u627e\u5230\\(7 \\times 7\\)\u4e2a\u50cf\u70b9\u3002\u51fd\u6570\u8fd0\u884c\u540e\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u662f\u5426\u627e\u5230\u6307\u5b9a\u6392\u5217\u6a21\u5f0f\u7684\u6807\u5fd7\u4f4d<code>retval</code>\u3002\u5982\u679c<code>retval</code>\u4e3a<code>True</code>\uff0c\u8868\u793a\u51fd\u6570\u627e\u4e86\u6307\u5b9a\u7684\u50cf\u70b9\u96c6\u5408\u3002\u5e76\u4e14\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u50cf\u70b9\u96c6\u5408\u4f1a\u6309\u987a\u5e8f\u6392\u5217\uff0c\u4f8b\u5982\u4ece\u5de6\u5230\u53f3\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u3002</p> <p>\u5c0f\u63d0\u793a</p> <p>\u5728\u7ed9\u5b9a\u4e00\u7ec4\u68cb\u76d8\u683c\u56fe\u50cf\u540e\uff0c\u8be5\u51fd\u6570\u53ef\u80fd\u65e0\u6cd5\u5728\u4efb\u4f55\u4e00\u5f20\u56fe\u50cf\u4e2d\u627e\u5230\u7b26\u5408\u8981\u6c42\u7684\u50cf\u70b9\u3002\u56e0\u6b64\uff0c\u8f83\u597d\u7684\u505a\u6cd5\u662f\uff1a\u542f\u52a8\u76f8\u673a\u5e76\u62cd\u6444\u56fe\u50cf\u540e\uff0c\u5c31\u4f7f\u7528\u8be5\u51fd\u6570\u8fdb\u884c\u50cf\u70b9\u7684\u68c0\u6d4b\uff1b\u4e00\u65e6\u80fd\u591f\u5728\u62cd\u6444\u7684\u56fe\u50cf\u4e2d\u627e\u5230\u7b26\u5408\u8981\u6c42\u7684\u50cf\u70b9\uff0c\u5c31\u5c06\u7ed3\u679c\u4fdd\u5b58\u5230\u6570\u7ec4\u4e2d\u3002\u6b64\u5916\uff0c\u5728\u4e24\u6b21\u62cd\u6444\u4e4b\u95f4\uff0c\u53ef\u4ee5\u9884\u7559\u4e00\u4e9b\u65f6\u95f4\uff0c\u7528\u4e8e\u8c03\u6574\u68cb\u76d8\u683c\u7684\u4f4d\u7f6e\u548c\u65b9\u5411\u3002\u901a\u8fc7\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\u6240\u9700\u7684\u7269\u50cf\u70b9\u5bf9\u6570\u6ee1\u8db3\u8981\u6c42\u3002\u5373\u4f7f\u662f\u672c\u6587\u4f7f\u7528\u768413\u5f20\u56fe\u50cf\uff0c\u6211\u4eec\u4e5f\u65e0\u6cd5\u4fdd\u8bc1\u6bcf\u5f20\u56fe\u50cf\u90fd\u80fd\u591f\u627e\u5230\u7269\u50cf\u70b9\u5bf9\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u505a\u6cd5\u662f\uff1a\u8bfb\u53d6\u6240\u6709\u7684\u56fe\u50cf\u5e76\u9010\u4e2a\u68c0\u6d4b\uff0c\u7136\u540e\u53ea\u9009\u53d6\u5176\u4e2d\u80fd\u591f\u68c0\u6d4b\u51fa\u7b26\u5408\u8981\u6c42\u50cf\u70b9\u7684\u56fe\u50cf\u8fdb\u884c\u540e\u7eed\u5904\u7406\u3002\u9664\u4e86\u68cb\u76d8\u683c\u6807\u5b9a\u677f\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5706\u5f62\u9635\u5217\u6807\u5b9a\u677f\u3002\u6b64\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528<code>cv2.findCirclesGrid()</code>\u51fd\u6570\u641c\u7d22\u7b26\u5408\u8981\u6c42\u7684\u50cf\u70b9\uff0c\u5e76\u4e14\u5706\u5f62\u9635\u5217\u6807\u5b9a\u677f\u53ef\u4ee5\u4f7f\u7528\u66f4\u5c11\u7684\u56fe\u50cf\u6570\u91cf\u5b8c\u6210\u76f8\u673a\u6807\u5b9a\u3002</p> \u8bd1\u8005\u6ce8\uff1aOpenCV\u4e2d\u652f\u6301\u7684\u6807\u5b9a\u677f\u7c7b\u578b <p>\u622a\u6b624.8.0\u7248\u672c\uff0cOpenCV\u7684API\u4e2d\u652f\u6301\u4e86\u68cb\u76d8\u683c\u3001\u5706\u5f62\u7f51\u683c\u548cCharuCo\u4e09\u79cd\u6807\u5b9a\u677f<sup>4</sup>\u3002</p> \u8bd1\u8005\u6ce8\uff1a\u68cb\u76d8\u683c\u7684\u89d2\u70b9\u6392\u5217 <p>\u4e00\u822c\u6765\u8bf4\uff0c\u62cd\u6444\u957f\u5bbd\u4e24\u4e2a\u65b9\u5411\u4e0a\u5177\u6709\u76f8\u540c\u65b9\u5757\u6570\u7684\u68cb\u76d8\u683c\u3002\u82e5\u957f\u5bbd\u65b9\u5757\u6570\u91cf\u76f8\u540c\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5b58\u5728\u4e8c\u4e49\u6027\uff0c\u65e0\u6cd5\u5206\u8fa8\u662f\u6ca1\u6709\u65cb\u8f6c\u7684\u7ed3\u679c\uff0c\u8fd8\u662f\u65cb\u8f6c\u4e86\\(180^{\\circ}\\)\u7684\u7ed3\u679c\u3002</p> <p>\u5bf9\u4e8e\u641c\u7d22\u5230\u50cf\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>cv2.cornerSubPix()</code>\u6765\u8fdb\u4e00\u6b65\u63d0\u9ad8\u4ed6\u4eec\u7684\u5750\u6807\u7cbe\u5ea6\u3002\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528<code>cv2.drawChessboardCorners</code>\u5728\u56fe\u50cf\u4e2d\u7ed8\u5236\u7cbe\u7ec6\u5316\u540e\u7684\u6709\u5e8f\u50cf\u70b9\u96c6\u5408\u3002\u4e0a\u8ff0\u7684\u6240\u6709\u6d41\u7a0b\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u5b8c\u6210\u529f\u80fd\u5b9e\u73b0\u3002</p> <pre><code>import cv2\nimport glob\nimport numpy as np\n\n# termination criteria\ncriteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)\n# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)\nobjp = np.zeros((6 * 7, 3), np.float32)\nobjp[:, :2] = np.mgrid[0:7, 0:6].T.reshape(-1, 2)\n# Arrays to store object points and image points from all the images.\nobjpoints = []  # 3d point in real world space\nimgpoints = []  # 2d points in image plane.\nimages = glob.glob(\"*.jpg\")\nfor fname in images:\n    img = cv2.imread(fname)\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    # Find the chess board corners\n    ret, corners = cv2.findChessboardCorners(gray, (7, 6), None)\n    # If found, add object points, image points (after refining them)\n    if ret == True:\n        objpoints.append(objp)\n        corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)\n        imgpoints.append(corners2)\n        # Draw and display the corners\n        cv2.drawChessboardCorners(img, (7, 6), corners2, ret)\n        cv2.imshow(\"img\", img)\n        cv2.waitKey(500)\ncv2.destroyAllWindows()\n</code></pre> <p>\u5bf9\u4e8e\u4efb\u610f\u4e00\u5f20\u68cb\u76d8\u683c\u56fe\u50cf\uff0c\u641c\u7d22\u50cf\u70b9\u5e76\u5c06\u50cf\u70b9\u7ed8\u5236\u5728\u68cb\u76d8\u683c\u56fe\u50cf\u4e2d\u7684\u7ed3\u679c\u5982\u56fe2\u6240\u793a\u3002</p> <p> </p>      \u56fe2 \u6709\u5e8f\u50cf\u70b9\u7684\u53ef\u89c6\u5316"},{"location":"camera-calibration-using-opencv/#\u6807\u5b9a\u53c2\u6570","title":"\u6807\u5b9a\u53c2\u6570","text":"<p>\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u7528\u4e8e\u76f8\u673a\u7684\u6807\u5b9a\u7684\u5173\u952e\u4fe1\u606f\uff1a\u7269\u50cf\u70b9\u5bf9\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4f7f\u7528<code>cv2.calibrateCamera()</code>\u51fd\u6570\u5b8c\u6210\u76f8\u673a\u7684\u6807\u5b9a\u8fc7\u7a0b\uff0c\u5f97\u5230\u76f8\u673a\u7684\u5185\u5916\u53c2\u6570\u4ee5\u53ca\u7578\u53d8\u53c2\u6570\u3002</p> <pre><code># ret - \u6807\u5b9a\u72b6\u6001\n# mtx - \u76f8\u673a\u5185\u53c2\u77e9\u9635\n# dist - \u7578\u53d8\u53c2\u6570\n# rvecs - \u65cb\u8f6c\u5411\u91cf\n# tvecs - \u5e73\u79fb\u5411\u91cf\nret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)\n</code></pre> \u8bd1\u8005\u6ce8\uff1a\u5f20\u6c0f\u6807\u5b9a\u6cd5 <p>\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u67e5\u770b\u5f20\u6b63\u53cb\u8001\u5e08\u4e8e1998\u5e74\u53d1\u8868\u7684\u8bba\u6587\uff0c\u5176\u4e2d\u8be6\u7ec6\u89e3\u91ca\u4e86\u76f8\u673a\u6807\u5b9a\u7684\u8fc7\u7a0b\u548c\u6570\u5b66\u63a8\u5bfc<sup>5</sup>\u3002</p>"},{"location":"camera-calibration-using-opencv/#\u56fe\u50cf\u6d88\u7578\u53d8","title":"\u56fe\u50cf\u6d88\u7578\u53d8","text":"<p>\u5728\u83b7\u5f97\u4e86\u76f8\u673a\u6807\u5b9a\u53c2\u6570\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u5b8c\u6210\u56fe\u50cf\u6d88\u7578\u53d8\u4efb\u52a1\u4e86\u3002\u5e76\u4e14\uff0cOpenCV\u63d0\u4f9b\u4e86\u4e24\u79cd\u65b9\u5f0f\u6765\u5b8c\u6210\u8fd9\u9879\u4efb\u52a1\uff1a\u4f7f\u7528<code>cv2.undistort()</code>\u51fd\u6570\u548c\u4f7f\u7528<code>cv2.remap()</code>\u51fd\u6570\u3002\u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>cv2.getOptimalNewCameraMatrix()</code>\u51fd\u6570\u5bf9\u76f8\u673a\u5185\u90e8\u53c2\u6570\u548c\u7578\u53d8\u53c2\u6570\u8fdb\u884c\u4f18\u5316\uff0c\u4f18\u5316\u7684\u7ed3\u679c\u7531\u81ea\u7531\u5ea6\u53c2\u6570\\(\\alpha\\)\u63a7\u5236\u3002\u6d88\u7578\u53d8\u65f6\uff0c\u4f1a\u5229\u7528\u6807\u5b9a\u53c2\u6570\u751f\u6210\u53d8\u6362\u77e9\u9635\u5bf9\u56fe\u50cf\u8fdb\u884c\u4fee\u6539\u3002\u8fd9\u4e00\u8fc7\u7a0b\u4e2d\uff0c\u56fe\u50cf\u7684\u8fb9\u7f18\u53ef\u80fd\u4f1a\u51fa\u73b0\u9ed1\u8fb9\u73b0\u8c61\u3002\u5f53\u4f18\u5316\u81ea\u7531\u5ea6\u53c2\u6570\\(\\alpha=0\\)\u65f6\uff0c\u8be5\u51fd\u6570\u5c06\u4f1a\u8fd4\u56de\u4e00\u7ec4\u80fd\u591f\u8ba9\u9ed1\u8fb9\u53d8\u5f97\u6700\u5c0f\u7684\u6807\u5b9a\u53c2\u6570\uff0c\u6b64\u65f6\u56fe\u50cf\u7684\u8fb9\u7f18\u53ef\u80fd\u4f1a\u4e22\u5931\u4e00\u4e9b\u542b\u6709\u4fe1\u606f\u7684\u50cf\u7d20\uff1b\u5f53\u4f18\u5316\u81ea\u7531\u5ea6\u53c2\u6570\\(\\alpha=1\\)\u65f6\uff0c\u8be5\u51fd\u6570\u4e0d\u4f1a\u9488\u5bf9\u9ed1\u8fb9\u8fdb\u884c\u4f18\u5316\uff0c\u6b64\u65f6\u6d88\u7578\u53d8\u7684\u7ed3\u679c\u4f1a\u5305\u542b\u9ed1\u8fb9\u3002\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u8fd8\u4f1a\u8fd4\u56de\u4e00\u4e2a\u56fe\u50cf\u7684ROI\uff0c\u7528\u4e8e\u5c06\u56fe\u50cf\u7684\u9ed1\u8fb9\u88c1\u526a\u79fb\u9664\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u5f85\u5904\u7406\u56fe\u50cf\uff0c\u7136\u540e\u4f7f\u7528<code>cv2.getOptimalNewCameraMatrix()</code>\u51fd\u6570\u4f18\u5316\u76f8\u673a\u7684\u5185\u90e8\u53c2\u6570\u548c\u7578\u53d8\u53c2\u6570\u3002\u672c\u6587\u4f7f\u7528\u7684\u662f\u540d\u4e3a<code>left12.jpg</code>\u7684\u56fe\u50cf\uff0c\u4e5f\u5c31\u662f\u672c\u6587\u7684\u56fe1\u3002</p> <pre><code>img = cv2.imread('left12.jpg')\nh, w = img.shape[:2]\nnewcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w,h), 1, (w,h))\n</code></pre> <p>\u4f7f\u7528<code>cv2.undistort()</code>\u51fd\u6570</p> <p>\u8fd9\u79cd\u65b9\u5f0f\u6700\u4e3a\u7b80\u5355\uff0c\u5c06\u4f18\u5316\u524d\u540e\u7684\u76f8\u673a\u5185\u53c2\u4e0e\u7578\u53d8\u53c2\u6570\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9<code>cv2.undistort()</code>\u51fd\u6570\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6d88\u7578\u53d8\u540e\u7684\u7ed3\u679c\u3002\u7136\u540e\uff0c\u518d\u4f7f\u7528\u4e0a\u6587\u63d0\u5230\u7684ROI\u5bf9\u6d88\u7578\u53d8\u7ed3\u679c\u8fdb\u884c\u88c1\u526a\u3002</p> <pre><code># undistort\ndst = cv2.undistort(img, mtx, dist, None, newcameramtx)\n# crop the image\nx, y, w, h = roi\ndst = dst[y:y+h, x:x+w]\ncv2.imwrite('calibresult.png', dst)\n</code></pre> <p>\u4f7f\u7528<code>cv2.remap()</code>\u51fd\u6570</p> <p>\u8fd9\u79cd\u65b9\u5f0f\u4e0e<code>cv2.undistort()</code>\u4e0d\u540c\uff1a\u4ed6\u9996\u5148\u4f7f\u7528<code>cv2.initUndistortRectifyMap()</code>\u51fd\u6570\u5efa\u7acb\u4e86\u6d88\u7578\u53d8\u5904\u7406\u524d\u540e\u56fe\u50cf\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u7136\u540e\u4f7f\u7528<code>cv2.remap()</code>\u5bf9\u5f85\u5904\u7406\u56fe\u50cf\u5e94\u7528\u8be5\u6620\u5c04\uff0c\u6700\u7ec8\u5f97\u5230\u6d88\u7578\u53d8\u7ed3\u679c\u3002</p> <pre><code># undistort\nmapx, mapy = cv2.initUndistortRectifyMap(mtx, dist, None, newcameramtx, (w,h), 5)\ndst = cv2.remap(img, mapx, mapy, cv2.INTER_LINEAR)\n# crop the image\nx, y, w, h = roi\ndst = dst[y:y+h, x:x+w]\ncv2.imwrite('calibresult.png', dst)\n</code></pre> <p>\u4f46\u65e0\u8bba\u4f7f\u7528\u54ea\u79cd\u65b9\u5f0f\uff0c\u90fd\u80fd\u591f\u5f97\u5230\u76f8\u540c\u7684\u6d88\u7578\u53d8\u7ed3\u679c\u3002\u672c\u6587\u56fe1\u7684\u6d88\u7578\u53d8\u7ed3\u679c\u5982\u56fe3\u6240\u793a\u3002\u53ef\u4ee5\u53d1\u73b0\uff1a\u56fe\u50cf\u4e2d\u539f\u672c\u5411\u8fb9\u7f18\u81a8\u80c0\u7684\u7ebf\u6761\u53d8\u76f4\u4e86\u3002\u5728\u5b8c\u6210\u76f8\u673a\u6807\u5b9a\u548c\u4f18\u5316\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528numpy\u4e2d\u7684<code>numpy.savez()</code>\u6216<code>numpy.savetxt()</code>\u65b9\u6cd5\u4fdd\u5b58\u76f8\u673a\u5185\u5916\u53c2\u6570\u548c\u7578\u53d8\u53c2\u6570\uff0c\u4ee5\u4fbf\u540e\u7eed\u8bfb\u53d6\u4f7f\u7528\u3002</p> <p> </p>      \u56fe3 \u56fe\u50cf\u6d88\u7578\u53d8\u7ed3\u679c\u793a\u4f8b"},{"location":"camera-calibration-using-opencv/#\u91cd\u6295\u5f71\u8bef\u5dee","title":"\u91cd\u6295\u5f71\u8bef\u5dee","text":"<p>\u91cd\u6295\u5f71\u8bef\u5dee\u53ef\u4ee5\u7528\u4e8e\u4f30\u8ba1\u7528\u4e8e\u56fe\u50cf\u6d88\u7578\u53d8\u53c2\u6570\u7684\u597d\u574f\uff1a\u91cd\u6295\u5f71\u8bef\u5dee\u8d8a\u63a5\u8fd1\u4e8e\u96f6\uff0c\u8bf4\u660e\u6d88\u7578\u53d8\u53c2\u6570\u8d8a\u7cbe\u786e\u3002\u5728\u8ba1\u7b97\u5f97\u5230\u76f8\u673a\u7684\u5185\u5916\u53c2\u6570\u548c\u7578\u53d8\u53c2\u6570\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>cv2.projectPoints</code>\u51fd\u6570\u5c06\u7269\u70b9\u8f6c\u6362\u5230\u4e8c\u7ef4\u7a7a\u95f4\u5f97\u5230\u7406\u8bba\u50cf\u70b9\uff1b\u7136\u540e\uff0c\u8ba1\u7b97\u7406\u8bba\u50cf\u70b9\u548c\u5b9e\u9645\u50cf\u70b9\u4e4b\u95f4\u5750\u6807\u7684\u6b27\u5f0f\u8ddd\u79bb\uff1b\u6700\u540e\uff0c\u8ba1\u7b97\u6240\u6709\u7406\u8bba\u50cf\u70b9\u548c\u5b9e\u9645\u50cf\u70b9\u4e4b\u95f4\u6b27\u5f0f\u8ddd\u79bb\u7684\u7b97\u672f\u5747\u503c\u4f5c\u4e3a\u91cd\u6295\u5f71\u8bef\u5dee\u3002</p> <pre><code>mean_error = 0\nfor i in range(len(objpoints)):\n    imgpoints2, _ = cv2.projectPoints(objpoints[i], rvecs[i], tvecs[i], mtx, dist)\n    error = cv2.norm(imgpoints[i], imgpoints2, cv2.NORM_L2)/len(imgpoints2)\n    mean_error += error\nprint( \"total error: {}\".format(mean_error/len(objpoints)) )\n</code></pre>"},{"location":"camera-calibration-using-opencv/#\u5b8c\u6574\u7684\u4ee3\u7801","title":"\u5b8c\u6574\u7684\u4ee3\u7801","text":"\u4f7f\u7528C++\u548cPython\u5b9e\u73b0\u7684\u5b8c\u6574\u6d4b\u8bd5\u4ee3\u7801 C++Python <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include &lt;vector&gt;\n\n#include &lt;opencv2/opencv.hpp&gt;\n\nint main() {\n  std::vector&lt;std::string&gt; inputPaths;  // \u9700\u8981\u7ed9\u5b9a\u8f93\u5165\u56fe\u50cf\u7ec4\n\n  std::vector&lt;cv::Mat&gt; inputImages;\n  inputImages.reserve(inputPaths.size());\n  for (const auto&amp; inputPath : inputPaths) {\n    cv::Mat inputImage = cv::imread(inputPath);\n    if (inputImage.empty()) {\n      std::cout &lt;&lt; \"Input image is empty. [\" &lt;&lt; inputPath &lt;&lt; \"]\\n\";\n      return EXIT_FAILURE;\n    }\n    inputImages.push_back(inputImage);\n  }\n\n  size_t imageCount = inputImages.size();\n\n  std::vector&lt;cv::Mat&gt; inputGrayImages;\n  inputGrayImages.reserve(inputImages.size());\n  for (const auto&amp; inputImage : inputImages) {\n    cv::Mat inputGrayImage;\n    cv::cvtColor(inputImage, inputGrayImage, cv::COLOR_BGR2GRAY);\n    inputGrayImages.push_back(inputGrayImage);\n  }\n\n  static std::vector&lt;cv::Point3f&gt; objectPoint = [](const cv::Size&amp; size) {\n    std::vector&lt;cv::Point3f&gt; points;\n    for (auto h = 0; h &lt; size.height; h++) {\n      for (auto w = 0; w &lt; size.width; w++) {\n        points.emplace_back(w, h, 0.F);\n      }\n    }\n    return points;\n  }(cv::Size(7, 6));\n\n  std::vector&lt;std::vector&lt;cv::Point3f&gt;&gt; objectPoints;\n  objectPoints.reserve(inputImages.size());\n  std::vector&lt;std::vector&lt;cv::Point2f&gt;&gt; imagePoints;\n  imagePoints.reserve(inputImages.size());\n  const cv::Size patternSize(7, 6);\n  const auto criteria = cv::TermCriteria(\n      cv::TermCriteria::Type::EPS + cv::TermCriteria::Type::MAX_ITER, 30,\n      0.001);\n  for (size_t i = 0; i &lt; imageCount; i++) {\n    std::cout &lt;&lt; inputPaths[i] &lt;&lt; std::endl;\n    std::vector&lt;cv::Point2f&gt; corners;\n    auto ret =\n        cv::findChessboardCorners(inputGrayImages[i], patternSize, corners);\n    if (ret) {\n      objectPoints.push_back(objectPoint);\n      cv::cornerSubPix(inputGrayImages[i], corners, cv::Size(11, 11),\n                       cv::Size(-1, -1), criteria);\n      imagePoints.push_back(corners);\n    }\n  }\n\n  auto imageSize = inputGrayImages.front().size();\n\n  cv::Mat cameraMatrix;\n  cv::Mat distCoeffs;\n  std::vector&lt;cv::Mat&gt; rvecs;\n  std::vector&lt;cv::Mat&gt; tvecs;\n  auto ret = cv::calibrateCamera(objectPoints, imagePoints, imageSize,\n                                 cameraMatrix, distCoeffs, rvecs, tvecs);\n  std::cout &lt;&lt; \"Total error: \" &lt;&lt; ret &lt;&lt; \"\\n\";\n\n  cv::Rect validPixROI;\n  auto newCameraMatrix = cv::getOptimalNewCameraMatrix(\n      cameraMatrix, distCoeffs, imageSize, 1.F, imageSize, &amp;validPixROI);\n\n  for (size_t i = 0; i &lt; imageCount; i++) {\n    cv::Mat undistortImage;\n    cv::undistort(inputImages[i], undistortImage, cameraMatrix, distCoeffs,\n                  newCameraMatrix);\n    std::string outputImageName =\n        \"undistortImage_\" + std::to_string(i) + \".png\";\n    cv::imwrite(outputImageName, undistortImage(validPixROI));\n  }\n\n  float meanError = 0.F;\n  for (size_t i = 0; i &lt; objectPoints.size(); i++) {\n    std::vector&lt;cv::Point2f&gt; objectProjectToImagePoints;\n    cv::projectPoints(objectPoints[i], rvecs[i], tvecs[i], cameraMatrix,\n                      distCoeffs, objectProjectToImagePoints);\n    auto error =\n        cv::norm(imagePoints[i], objectProjectToImagePoints, cv::NORM_L2);\n    error /= objectProjectToImagePoints.size();\n    meanError += error;\n  }\n\n  meanError /= objectPoints.size();\n  std::cout &lt;&lt; \"Total error: \" &lt;&lt; ret &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre> <pre><code>import cv2\nimport glob\nimport numpy as np\nfrom pprint import pprint\n\ncriteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)\n\nobj_point = np.zeros((6 * 7, 3), np.float32)\nobj_point[:, :2] = np.mgrid[0:7, 0:6].T.reshape(-1, 2)\n\nobj_points = []\nimg_points = []\n\nimage_names = [] # \u9700\u8981\u7ed9\u5b9a\u8f93\u5165\u56fe\u50cf\u7ec4\n\n(w, h) = (0, 0)\n\nfor image_name in image_names:\n    pprint(\"Current image: [{}]\".format(image_name))\n    image = cv2.imread(image_name)\n    image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    (w, h) = image_gray.shape[::-1]\n\n    ret, corners = cv2.findChessboardCorners(image_gray, (7, 6), None)\n    # ret, corners = cv2.findCirclesGrid(image_gray, (7, 6), None)\n    if ret is True:\n        obj_points.append(obj_point)\n        corners_refined = cv2.cornerSubPix(image_gray, corners, (11, 11), (-1, -1), criteria)\n        img_points.append(corners_refined)\n\npprint(\"Image w = {}, h = {}\".format(w, h))\nret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(obj_points, img_points, (w, h), None, None)\n\n# undistortion\nimage = cv2.imread(image_names[0])\nnew_camera_mtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w, h), 1, (w, h))\ndst = cv2.undistort(image, mtx, dist, None, new_camera_mtx)\n\n# x, y, w, h = roi\n# dst = dst[y: y+h, x: x+w]\ncv2.imwrite(\"calibresult.png\", dst)\n\n# reprojection error\nmean_error = 0\nfor i in range(len(obj_points)):\n    img_points2, _ = cv2.projectPoints(obj_points[i], rvecs[i], tvecs[i], mtx, dist)\n    error = cv2.norm(img_points[i], img_points2, cv2.NORM_L2) / len(img_points2)\n    print(error)\n    mean_error += error\npprint(\"Total error: {}\".format(mean_error / len(obj_points)))\n</code></pre> <ol> <li> <p>OpenCV: Camera Calibration \u21a9\u21a9</p> </li> <li> <p>Distortion (optics) \u21a9</p> </li> <li> <p>LearnOpenGL-CN \u5750\u6807\u7cfb\u7edf \u21a9</p> </li> <li> <p>\u76f8\u673a\u6807\u5b9a\u4e2d\u5404\u79cd\u6807\u5b9a\u677f\u4ecb\u7ecd\u4ee5\u53ca\u4f18\u7f3a\u70b9\u5206\u6790 \u21a9</p> </li> <li> <p>A Flexible New Technique for Camera Calibration \u21a9</p> </li> </ol>"},{"location":"machine-learning-knn-introdution/","title":"K\u8fd1\u90bb\u7b97\u6cd5","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;limits&gt;\n#include &lt;numeric&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include &lt;opencv2/core.hpp&gt;\n#include &lt;opencv2/highgui.hpp&gt;\n#include &lt;opencv2/imgcodecs.hpp&gt;\n#include &lt;opencv2/imgproc.hpp&gt;\n\n#define NOTREACHED() std::cout &lt;&lt; \"NOTREACHED\\n\";\n\nenum class Metrics : uint8_t {\n  kL1 = 0,\n  kL2 = 1,\n  kBoundary = std::numeric_limits&lt;uint8_t&gt;::max(),\n};\n\nclass Object {\n public:\n  Object(int x, int y, int c) : x_(x), y_(y), c_(c) {}\n\n  [[nodiscard]] int x() const { return x_; }\n  [[nodiscard]] int y() const { return y_; }\n  [[nodiscard]] int c() const { return c_; }\n\n  [[nodiscard]] double distance(int x, int y, Metrics metrics = Metrics::kL1) const {\n    assert(metrics &lt; Metrics::kBoundary &amp;&amp; \"Metrics out of boundary.\");\n    if (metrics == Metrics::kL1) {\n      return abs(x - this-&gt;x()) + abs(y - this-&gt;y());\n    }\n    if (metrics == Metrics::kL2) {\n      double pdist = std::pow(abs(x - this-&gt;x()), 2.0) + std::pow(abs(y - this-&gt;y()), 2.0);\n      return std::sqrt(pdist);\n    }\n\n    NOTREACHED();\n    return 0.0;\n  }\n\n private:\n  int x_;\n  int y_;\n  int c_;\n};\n\nvoid knn(cv::Mat&amp; canvas,\n         int kClose,\n         const std::vector&lt;Object&gt;&amp; objects,\n         int numOfClasses,\n         Metrics metrics,\n         const std::vector&lt;cv::Scalar&gt;&amp; randColors,\n         double maxDistance) {\n  auto compare = [](const auto&amp; p1, const auto&amp; p2) { return p1.first &lt; p2.first; };\n\n  // \u9010\u4e2a\u8ba1\u7b97\u50cf\u7d20\u4e2d\u6bcf\u4e2a\u70b9\u548c\u6bcf\u4e2aobject\u4e4b\u95f4\u7684\u8ddd\u79bb\n  int rows = canvas.rows;\n  int cols = canvas.cols;\n  for (int r = 0; r &lt; rows; r++) {\n    for (int c = 0; c &lt; cols; c++) {\n      std::priority_queue&lt;std::pair&lt;double, Object&gt;, std::vector&lt;std::pair&lt;double, Object&gt;&gt;, decltype(compare)&gt; maxHeap(\n          compare);\n      for (const auto&amp; o : objects) {\n        auto dist = o.distance(c, r, metrics);\n        if (dist &gt;= maxDistance) {\n          continue;\n        }\n        maxHeap.emplace(dist, o);\n        if (maxHeap.size() &gt; kClose) {\n          maxHeap.pop();\n        }\n      }\n      if (!maxHeap.empty()) {\n        std::vector&lt;int&gt; voter(numOfClasses, 0);\n        while (!maxHeap.empty()) {\n          auto o = maxHeap.top();\n          maxHeap.pop();\n          voter[o.second.c()]++;\n        }\n\n        auto most = std::max_element(voter.begin(), voter.end()) - voter.begin();\n        canvas.at&lt;cv::Vec4b&gt;(cv::Point(c, r)) = randColors[most];\n      }\n    }\n  }\n}\n\nint main() {\n  int numOfClasses = 4;\n  int numOfPoints = 40;\n  int clusterDistance = 50;\n  Metrics metrics = Metrics::kL1;\n  int kClose = 5;\n  int canvasSize = 600;\n  double maxDistance = canvasSize &gt;&gt; 1;\n\n  cv::Mat canvas = cv::Mat::zeros(cv::Size(canvasSize, canvasSize), CV_8UC4);\n\n  std::vector&lt;Object&gt; objects;\n  objects.reserve(numOfPoints);\n\n  cv::RNG rng(cv::getTickCount());\n\n  // \u751f\u6210\u968f\u673a\u989c\u8272 \u6bcf\u79cd\u7c7b\u522b\u5bf9\u5e94\u4e00\u79cd\u968f\u673a\u989c\u8272\n  std::vector&lt;cv::Scalar&gt; randColors;\n  randColors.reserve(numOfClasses);\n  for (int i = 0; i &lt; numOfClasses; i++) {\n    randColors.emplace_back(rng.uniform(0, 255), rng.uniform(0, 255), rng.uniform(0, 255), 191);\n  }\n\n  // \u751f\u6210\u968f\u673a\u79cd\u5b50\u548c\u79cd\u5b50\u7c07\n  for (int i = 0; i &lt; numOfClasses; i++) {\n    objects.emplace_back(rng.uniform(0, canvasSize), rng.uniform(0, canvasSize), i);\n  }\n  for (int i = numOfClasses; i &lt; numOfPoints; i++) {\n    int x = objects[i % numOfClasses].x() + rng.uniform(-clusterDistance, clusterDistance);\n    int y = objects[i % numOfClasses].y() + rng.uniform(-clusterDistance, clusterDistance);\n    int c = objects[i % numOfClasses].c();\n    objects.emplace_back(x, y, c);\n  }\n\n  knn(canvas, kClose, objects, numOfClasses, metrics, randColors, maxDistance);\n\n  // \u540e\u5904\u7406 \u4e58\u4ee5\u900f\u660e\u5ea6 \u7136\u540e\u5c06\u6240\u6709\u79cd\u5b50\u70b9\u7ed8\u5236\u4e0a\u53bb\n  for (int i = 0; i &lt; numOfPoints; i++) {\n    auto color = randColors[objects[i].c()] * 0.75;\n    color[3] = 255;\n    cv::circle(canvas, cv::Point(objects[i].x(), objects[i].y()), 5, color, -1);\n  }\n\n  cv::imwrite(\"knn.png\", canvas);\n\n  return 0;\n}\n</code></pre> \u793a\u4f8b\u4ee3\u7801\u7b2c25-27\u884c\u4e2d<code>[[nodiscard]]</code>\u6807\u8bb0\u7684\u4f5c\u7528 <p><code>[[nodiscard]]</code>\u662fC++17\u5f15\u5165\u7684\u6807\u8bb0\u7b26<sup>1</sup>\uff0c\u53ef\u4ee5\u7528\u4e8e\u4fee\u9970\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6216\u7c7b/\u679a\u4e3e\u7c7b\u3002\u5f53\u8c03\u7528\u8005\u6ca1\u6709\u83b7\u53d6\u8fd4\u56de\u503c\u6216\u7c7b\u5bf9\u8c61\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1a\u7ed9\u51fa\u8b66\u544a\u3002\u6ce8\u610f\uff0c\u7c7b\u5bf9\u8c61\u7684\u6307\u9488\u6216\u5f15\u7528\u4e0d\u4f1a\u89e6\u53d1\u7f16\u8bd1\u5668\u8b66\u544a\u3002</p> <ol> <li> <p>C++ attribute: nodiscard (since C++17) \u21a9</p> </li> </ol>"},{"location":"monitor-process-memory-usage/","title":"\u8fdb\u7a0b\u5185\u5b58\u4fe1\u606f","text":"<p>\u672c\u7bc7\u8bb0\u5f55\u4e86\u5728Linux\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u5df2\u77e5PID\u65f6\uff0c\u4f7f\u7528C++\u83b7\u53d6\u8fdb\u7a0b\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\u7684\u65b9\u6cd5\u3002</p>"},{"location":"monitor-process-memory-usage/#\u5185\u5b58\u4fe1\u606f\u7c7b\u578b","title":"\u5185\u5b58\u4fe1\u606f\u7c7b\u578b","text":"<ul> <li><code>vsize</code>\uff1a<code>virtual memory size</code>\uff0c\u865a\u62df\u5185\u5b58\u5927\u5c0f\uff0c\u4f4d\u4e8e<code>/proc/&lt;pid&gt;/stat</code>\u4e2d\uff0c\u901a\u5e38\u6307\u8fdb\u7a0b\u81ea\u5df1\u53ef\u89c1\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4e0d\u4e00\u5b9a\u4e0e\u7269\u7406\u5185\u5b58\u5bf9\u5e94\uff1b</li> <li><code>rss</code>\uff1a<code>resident set size</code>\uff0c\u9a7b\u7559\u96c6\u5927\u5c0f\uff0c\u4f4d\u4e8e<code>/proc/&lt;pid&gt;/stat</code>\u4e2d\uff0c\u6307\u8fdb\u7a0b\u9a7b\u7559\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5927\u5c0f\uff0c\u5305\u542b\u4e86\u5171\u4eab\u5e93\u7684\u5927\u5c0f\uff1b</li> <li><code>urss</code>\uff1a<code>unique resident set size</code>\uff0c\u72ec\u5360\u9a7b\u7559\u96c6\u5927\u5c0f\uff0c\u4f4d\u4e8e<code>/proc/&lt;pid&gt;/statm</code>\u4e2d\uff0c\u6307\u8fdb\u7a0b\u9a7b\u7559\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5927\u5c0f\uff0c\u4e0d\u5305\u542b\u5171\u4eab\u5e93\u7684\u5927\u5c0f\uff1b</li> <li><code>pss</code>\uff1a<code>proportional set size</code>\uff0c\u4f4d\u4e8e<code>/proc/&lt;pid&gt;/smaps</code>\u6216<code>/proc/&lt;pid&gt;/smaps_rollup</code>(since 4.14)\u4e2d\uff0c\u6307\u8fdb\u7a0b\u9a7b\u7559\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5927\u5c0f\uff0c\u5176\u4e2d\u5171\u4eab\u5e93\u7684\u5927\u5c0f\u6309\u6bd4\u4f8b\u5206\u914d\u3002</li> </ul>"},{"location":"monitor-process-memory-usage/#\u4ee3\u7801\u5b9e\u73b0","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include &lt;stdbool.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n\n#include &lt;linux/version.h&gt;\n\n#define BUFSIZE 1024\n\ntypedef unsigned long ulong;\ntypedef struct {\n  ulong size;\n  ulong rss;\n  ulong urss;\n  ulong pss;\n} mem_info_t;\n\nstatic bool retrieve_process_memory_info(pid_t pid, mem_info_t* mem_info);\n\nint main(int argc, char* argv[]) {\n  pid_t self = getpid();\n  mem_info_t mem_info = {0};\n  if (!retrieve_process_memory_info(self, &amp;mem_info)) {\n    perror(\"ERROR: cannot retrieve process memory information: pid=[%d]\\n\", self);\n    return 1;\n  }\n\n  printf(\n      \"pid = %d, size = %lu (KB), rss = %lu (KB), urss = %lu (KB), pss\"\n      \"= %lu (KB)\\n\",\n      self, mem_info.size, mem_info.rss, mem_info.urss, mem_info.pss);\n\n  getchar();\n  return 0;\n}\n\nbool retrieve_process_memory_info(pid_t pid, mem_info_t* mem_info) {\n  FILE* fd = NULL;\n  char buf[BUFSIZE];\n\n  // /proc/&lt;pid&gt;/stat\n  // vsize and rss\n  snprintf(buf, BUFSIZE - 1, \"/proc/%d/stat\", pid);\n  buf[BUFSIZE - 1] = '\\0';\n  if ((fd = fopen(buf, \"r\")) == NULL) {\n    return false;\n  }\n\n  if (fscanf(fd,\n             \"%*d %*s %*c %*d %*d %*d %*d %*d %*u %*u %*u %*u %*u %*lu %*lu\"\n             \"%*d %*d %*d %*d %*u %*u %*d %lu %lu\",\n             &amp;mem_info-&gt;size, &amp;mem_info-&gt;rss) != 2) {\n    fclose(fd);\n    return false;\n  }\n\n  if (fclose(fd)) {\n    return false;\n  }\n\n  mem_info-&gt;size /= 1024;\n  mem_info-&gt;rss = mem_info-&gt;rss * sysconf(_SC_PAGESIZE) / 1024;\n\n  // /proc/&lt;pid&gt;/statm\n  // urss\n  snprintf(buf, BUFSIZE - 1, \"/proc/%d/statm\", pid);\n  buf[BUFSIZE - 1] = '\\0';\n  if ((fd = fopen(buf, \"r\")) == NULL) {\n    return false;\n  }\n\n  if (fscanf(fd, \"%*d %*u %lu\", &amp;mem_info-&gt;urss) != 1) {\n    fclose(fd);\n    return false;\n  }\n\n  if (fclose(fd)) {\n    return false;\n  }\n\n  mem_info-&gt;urss =\n      mem_info-&gt;rss - (mem_info-&gt;urss * sysconf(_SC_PAGESIZE) / 1024);\n\n// if kernel version is less than 4.14, use /proc/&lt;pid&gt;/smaps\n// else, use /proc/&lt;pid&gt;/smaps_rollup\n// pss\n#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(4, 14, 0)\n  printf(\"Using /proc/&lt;pid&gt;/smaps\\n\");\n  snprintf(buf, BUFSIZE - 1, \"/proc/%d/smaps\", pid);\n  buf[BUFSIZE - 1] = '\\0';\n  if ((fd = fopen(buf, \"r\")) == NULL) {\n    return false;\n  }\n\n  char line[BUFSIZE];\n  char str[BUFSIZE];\n  while (fgets(line, sizeof(line), fd)) {\n    ulong val = 0;\n    if (sscanf(line, \"%31[^:]:%lu\", str, &amp;val) == 2) {\n      if (strcmp(str, \"Pss\") == 0) {\n        mem_info-&gt;pss += val;\n      }\n    }\n  }\n\n  if (fclose(fd)) {\n    return false;\n  }\n#else\n  printf(\"Using /proc/&lt;pid&gt;/smaps_rollup\\n\");\n  snprintf(buf, BUFSIZE - 1, \"/proc/%d/smaps_rollup\", pid);\n  buf[BUFSIZE - 1] = '\\0';\n  if ((fd = fopen(buf, \"r\")) == NULL) {\n    return false;\n  }\n\n  char line[BUFSIZE];\n  char str[BUFSIZE];\n  while (fgets(line, sizeof(line), fd)) {\n    unsigned long val = 0;\n    if (sscanf(line, \"%31[^:]:%lu\", str, &amp;val) == 2) {\n      if (strcmp(str, \"Pss\") == 0) {\n        mem_info-&gt;pss = val;\n        break;\n      }\n    }\n  }\n\n  if (fclose(fd)) {\n    return false;\n  }\n#endif\n\n  return true;\n}\n</code></pre>"},{"location":"monitor-process-memory-usage/#\u53c2\u8003\u94fe\u63a5","title":"\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>proc(5)-Linux manual page</li> <li>KernelNewbies: Linux_4.14</li> <li>KDE/ksysguard - GitHub</li> <li>Add vmPSS to Process and display it as \"total memory\" column</li> <li>Add /proc/pid/smaps_rollup</li> </ul>"},{"location":"placement-new-in-cplusplus/","title":"C++\u4e2d\u7684\u653e\u7f6enew","text":"<p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u64cd\u4f5c\u7b26<code>new</code>\u7528\u4e8e\u52a8\u6001\u5206\u7c7b\u5185\u5b58\uff1b\u5e76\u4e14\u6240\u5206\u914d\u5185\u5b58\u7684\u751f\u547d\u5468\u671f\u5c06\u4e0d\u53d7\u4f5c\u7528\u57df\u7ba1\u7406<sup>1</sup>\u3002\u4e0e<code>malloc()</code>\u65b9\u6cd5\u4e0d\u540c\uff0c\u64cd\u4f5c\u7b26<code>new</code>\u4f1a\u505a\u4e24\u4ef6\u4e8b\uff1a\u5206\u914d\u5185\u5b58\uff1b\u521d\u59cb\u5316\u5bf9\u8c61\u3002\u800c\u653e\u7f6enew\uff08placement new\uff09\u5219\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u52a8\u6001\u5185\u5b58\u65b9\u6cd5\uff0c\u5176\u80fd\u591f\u5728\u5df2\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u4e0a\u521b\u5efa\u5bf9\u8c61\u3002\u56e0\u6b64\uff0c\u653e\u7f6enew\u53ea\u505a\u4e86\u4e00\u4ef6\u4e8b\uff1a\u521d\u59cb\u5316\u5bf9\u8c61\u3002</p> <p>cppreference.com - new expression<sup>1</sup></p> <p>Creates and initializes objects with dynamic storage duration, that is, objects whose lifetime is not necessarily limited by the scope in which they were created.  If placement-params are provided, they are passed to the allocation function as additional arguments. Such allocation functions are known as \"placement new\", after the standard allocation function <code>void* operator new(std::size_t, void*)</code>, which simply returns its second argument unchanged. This is used to construct objects in allcated storage.</p>"},{"location":"placement-new-in-cplusplus/#\u4f7f\u7528\u65b9\u5f0f","title":"\u4f7f\u7528\u65b9\u5f0f","text":"<pre><code>#include &lt;iostream&gt;\n\nclass MyClass {\n public:\n  MyClass() { std::cout &lt;&lt; \"MyClass::MyClass\\n\"; }\n  ~MyClass() { std::cout &lt;&lt; \"MyClass::~MyClass\\n\"; }\n\n  MyClass(const MyClass&amp;) = delete;\n  MyClass&amp; operator=(const MyClass&amp;) = delete;\n  MyClass(MyClass&amp;&amp;) = delete;\n  MyClass&amp; operator=(MyClass&amp;&amp;) = delete;\n\n private:\n  int m1;\n  double m2;\n};\n\nint main() {\n  {\n    char buf[sizeof(MyClass)];\n    void* p = buf;\n\n    MyClass* o = new (p) MyClass();  // placement new\n    o-&gt;~MyClass();  // Explicitly call the destructor for the placed object.\n  }\n  {\n    MyClass* o = new MyClass();\n    std::cout &lt;&lt; \"o address = \" &lt;&lt; o &lt;&lt; \"\\n\";\n\n    o-&gt;~MyClass();\n    o = new (o) MyClass();  // placement new\n    std::cout &lt;&lt; \"o address = \" &lt;&lt; o &lt;&lt; \"\\n\";\n\n    delete o;\n  }\n\n  return 0;\n}\n</code></pre> <p>\u4e0a\u65b9\u662f\u4e00\u6bb5\u4f7f\u7528\u653e\u7f6enew\u7684\u573a\u666f\uff1a\u5728\u6808\u4e0a\u7533\u8bf7\u4e00\u6bb5\u5185\u5b58\u540e\uff0c\u5c06\u8fd9\u6bb5\u5185\u5b58\u7684\u5730\u5740\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u64cd\u4f5c\u7b26<code>new</code>\u3002\u6b64\u5916\uff0c\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7531\u7528\u6237\u8d1f\u8d23\uff1a\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u56de\u6536<code>buf</code>\uff1b\u5728\u6b64\u4e4b\u524d\uff0c\u9700\u8981\u663e\u5f0f\u8c03\u7528\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002</p>"},{"location":"placement-new-in-cplusplus/#\u4f7f\u7528\u573a\u666f","title":"\u4f7f\u7528\u573a\u666f","text":"<p>\u653e\u7f6enew\u80fd\u591f\u5728\u5df2\u5206\u914d\u5185\u5b58\u4e0a\u76f4\u63a5\u6784\u9020\u5bf9\u8c61\uff0c\u7701\u53bb\u4e86\u5185\u5b58\u7684\u5206\u914d\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u91cd\u590d\u5229\u7528\u5df2\u5206\u914d\u7a7a\u95f4\u3002\u4f46\u603b\u7684\u6765\u8bf4\uff0c\u5e76\u4e0d\u63a8\u8350\u4f7f\u7528\u653e\u7f6enew\uff0c\u539f\u56e0\u5982\u4e0b<sup>2</sup>\uff1a</p> <ol> <li>\u653e\u7f6enew\u9700\u8981\u7528\u6237\u81ea\u884c\u4fdd\u8bc1\u5df2\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u80fd\u591f\u653e\u7f6e\u5bf9\u8c61\uff0c\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\u90fd\u4e0d\u4f1a\u5bf9\u7a7a\u95f4\u662f\u5426\u8db3\u591f\u8fdb\u884c\u68c0\u67e5\u3002</li> <li>\u5df2\u5206\u914d\u7a7a\u95f4\u53ef\u80fd\u5b58\u5728\u5bf9\u9f50\u95ee\u9898\uff1a\u867d\u7136\u7406\u8bba\u4e0a\u5df2\u5206\u914d\u7a7a\u95f4\u53ef\u4ee5\u653e\u7f6e\u5bf9\u8c61\uff0c\u4f46\u7531\u4e8e\u5185\u5b58\u5bf9\u9f50\uff0c\u5b9e\u9645\u5360\u7528\u7684\u7a7a\u95f4\u4f1a\u66f4\u5927\u3002</li> </ol> <p>\u603b\u7684\u6765\u8bf4\uff0c\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\u4e0d\u4f1a\u68c0\u67e5\u653e\u7f6enew\u662f\u5426\u6b63\u786e\u5b8c\u6210\uff0c\u9700\u8981\u7528\u6237\u81ea\u884c\u8003\u8651\u7a7a\u95f4\u5927\u5c0f\u5185\u5b58\u5bf9\u9f50\u7b49\u95ee\u9898\u3002\u4e0d\u7ba1\u600e\u6837\uff0c\u653e\u7f6enew\u4e0d\u8981\u968f\u610f\u4f7f\u7528\uff0c\u9664\u975e\u8feb\u4e0d\u5f97\u5df2\uff1b\u5982\u679c\u60f3\u8981\u91cd\u590d\u5229\u7528\u5df2\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u7528\u6237\u5e94\u5f53\u9009\u62e9\u4f7f\u7528\u5185\u5b58\u6c60\u7ba1\u7406\u5185\u5b58\u800c\u4e0d\u4f7f\u7528\u653e\u7f6enew\u3002</p> <p>Tips</p> <p>\u4e4b\u524d\u6709\u88ab\u95ee\u5230\uff1a\u5728\u4f55\u79cd\u60c5\u51b5\u6216\u573a\u666f\u4e0b\uff0c\u9700\u8981\u663e\u5f0f\u8c03\u7528\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff1f\u5f53\u65f6\u6ca1\u6709\u56de\u7b54\u51fa\u6765\u3002\u4e0d\u8fc7\uff0c\u6b64\u65f6\u6211\u7684\u56de\u7b54\u5e94\u8be5\u662f\uff1a\u4f7f\u7528placement new\u65f6\u9700\u8981\u663e\u5f0f\u8c03\u7528\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002</p> <ol> <li> <p>cppreference.com - new expression \u21a9\u21a9</p> </li> <li> <p>isocpp - FAQ:Destructors \u21a9</p> </li> </ol>"},{"location":"std-string-starts-with/","title":"\u5229\u7528C++\u7684rfind\u5b9e\u73b0startsWith\u529f\u80fd","text":""},{"location":"std-string-starts-with/#startswith","title":"startsWith","text":"<p>\u4e00\u822c\u800c\u8a00\uff0c<code>startsWith</code>\u63a5\u53e3\u53ef\u4ee5\u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u67d0\u4e9b\u5b57\u7b26\u4e32\u5f00\u59cb\u3002\u5728Java\u4e2d\uff0c<code>startsWith</code>\u51fd\u6570\u7684\u539f\u578b<sup>1</sup>\u4e3a\uff1a</p> <pre><code>// @param chars: A String, representing the character(s) to check for.\n// @return: A boolean value:\n//          true  - if the string starts with the specified character(s).\n//          false - if the string does not start with the specified \n//                  character(s).\npublic boolean startsWith(String chars);\n</code></pre>"},{"location":"std-string-starts-with/#stdrfind","title":"std::rfind","text":"<p>C++\u7684string\u7c7b\u5e76\u672a\u76f4\u63a5\u63d0\u4f9b<code>startsWith</code>\u63a5\u53e3\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528<code>rfind</code>\u5b9e\u73b0\u7c7b\u4f3c\u7684\u6548\u679c\u3002<code>rfind</code>\u7684\u51fd\u6570\u539f\u578b<sup>2</sup>\u4e3a\uff1a</p> <pre><code>size_t rfind(const string&amp; str, size_t pos = npos) const noexcept;\n</code></pre> <p>cplusplus.com</p> <p>When pos is specified, the search only includes sequences of characters that begin at or before position pos, ignoring any possible match beginning after pos.<sup>2</sup></p> <p>\u8fd9\u91cc\uff0c<code>pos</code>\u53c2\u6570\u53ef\u4ee5\u7701\u7565\uff0c\u6b64\u65f6<code>rfind</code>\u5c06\u4f1a\u5f97\u5230\u5339\u914d\u7ed3\u679c\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u5f53\u4f7f\u7528<code>pos</code>\u65f6\uff0c<code>rfind</code>\u53ea\u4f1a\u641c\u7d22<code>pos</code>\u4e4b\u524d\u548c<code>pos</code>\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u5373<code>rfind</code>\u4e0d\u518d\u5339\u914d<code>pos</code>\u4e4b\u540e\u7684\u4f4d\u7f6e\u3002</p> <p>\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b9e\u73b0<code>startsWith</code>\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528<code>pos = 0</code>\u3002\u6b64\u65f6\uff0c<code>rfind</code>\u5c06\u53ea\u641c\u7d22\u5b57\u7b26\u4e32\u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c\u4e14\u53ea\u641c\u7d22\u4e00\u6b21\uff0c\u4ece\u800c\u5b9e\u73b0\u548c<code>startsWith</code>\u76f8\u540c\u7684\u6548\u679c<sup>3</sup>\u3002</p>"},{"location":"std-string-starts-with/#\u793a\u4f8b\u4ee3\u7801","title":"\u793a\u4f8b\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\ninline bool startsWith(const std::string&amp; str, const std::string&amp; chars) {\n  return str.rfind(chars, 0) == 0;\n}\n\ninline bool startsWith(const std::string&amp; str, const char* chars) {\n  return str.rfind(chars, 0) == 0;\n}\n\ninline bool startsWith(const std::string&amp; str, char ch) {\n  return str.rfind(ch, 0) == 0;\n}\n\nint main() {\n  string s = \"abcdefabcdef\";\n  std::cout &lt;&lt; std::boolalpha &lt;&lt; startsWith(s, \"abc\") &lt;&lt; std::endl;\n  std::cout &lt;&lt; std::boolalpha &lt;&lt; startsWith(s, \"bcd\") &lt;&lt; std::endl;\n  std::cout &lt;&lt; std::boolalpha &lt;&lt; startsWith(s, 'a') &lt;&lt; std::endl;\n  std::cout &lt;&lt; std::boolalpha &lt;&lt; startsWith(s, 'b') &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"std-string-starts-with/#\u65b0\u7684c17\u548cc20\u4e2d\u7684\u53d8\u5316","title":"\u65b0\u7684C++17\u548cC++20\u4e2d\u7684\u53d8\u5316","text":"<p>\u5728C++17\u6807\u51c6\u5e26\u6765\u4e86\u5173\u4e8e<code>std::string</code>\u7684\u89c6\u56fe<code>std::string_view</code>\u3002<code>std::string_view</code>\u672c\u8d28\u4e0a\u662f\u4e0d\u6301\u6709\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u4ec5\u4fdd\u7559\u5bf9\u5b57\u7b26\u4e32\u5bf9\u8c61\u53ea\u8bfb\u5f15\u7528\u7684\u7c7b<sup>4</sup>\u3002<code>std::string_view</code>\u7684\u4e3b\u8981\u76ee\u7684\u662f\u907f\u514d<code>std::string</code>\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4ea7\u751f\u7684\u6784\u9020\u6216\u62f7\u8d1d\u884c\u4e3a<sup>5</sup><sup>6</sup>\u3002\u5bf9\u5e94\u7684\uff0c\u4f7f\u7528<code>std::string_view</code>\u5b9e\u73b0<code>startsWith</code>\u7684\u5185\u5bb9\u5982\u4e0b\uff0c\u4e0e<code>std::string</code>\u51e0\u4e4e\u6ca1\u6709\u533a\u522b\u3002</p> <pre><code>inline bool startsWith(std::string_view sv, std::string_view chars) {\n  return sv.rfind(chars, 0) == 0;\n}\n\ninline bool startsWith(std::string_view sv, const char* chars) {\n  return sv.rfind(chars, 0) == 0;\n}\n\ninline bool startsWith(std::string_view sv, char ch) {\n  return sv.rfind(ch, 0) == 0;\n}\n</code></pre> <p>\u800cC++20\u6807\u51c6\u5219\u76f4\u63a5\u4e3a<code>std::string</code>\u548c\u89c6\u56fe<code>std::string_view</code>\u8865\u5145\u4e86<code>starts_with()</code>\u65b9\u6cd5\uff0c\u7528\u4e8e\u5224\u65ad\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u4e32\u89c6\u56fe\u662f\u5426\u4ee5\u7279\u5b9a\u5b57\u7b26\u5e8f\u5217\u5f00\u59cb<sup>7</sup>\u3002</p> <pre><code>constexpr bool starts_with( basic_string_view sv ) const noexcept;  // since C++20\nconstexpr bool starts_with( CharT ch ) const noexcept;  // since C++20\nconstexpr bool starts_with( const CharT* s ) const;  // since C++20\n</code></pre> <ol> <li> <p>Java String startsWith() Method \u21a9</p> </li> <li> <p>cplusplus.com - std::string::rfind \u21a9\u21a9</p> </li> <li> <p>How do I check if a C++ std::string starts with a certain string, and convert a substring to an int? \u21a9</p> </li> <li> <p>Microsoft -  \u21a9 <li> <p>C++17 string_view\u7684\u539f\u7406 \u21a9</p> </li> <li> <p>C++17 \u7279\u6027:\u4f7f\u7528 std::string_view \u65f6\u5c0f\u5fc3\u8e29\u5751 \u21a9</p> </li> <li> <p>cppreference.com - std::basic_string_view::starts_with \u21a9"}]}